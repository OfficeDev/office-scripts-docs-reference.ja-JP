### YamlMime:TSType
name: Excel.CustomXmlPart
uid: excel!Excel.CustomXmlPart:interface
package: excel!
fullName: Excel.CustomXmlPart
summary: ブック内のカスタム XML パーツオブジェクトを表します。
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: id
  uid: excel!Excel.CustomXmlPart#id:member
  package: excel!
  fullName: id
  summary: カスタム XML パーツの ID。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    // You must have the xmlns attribute to populate the \n    // CustomXml.namespaceUri property.\n    let originalXml = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    let customXmlPart = context.workbook.customXmlParts.add(originalXml);\n    customXmlPart.load(\"id\");\n    let xmlBlob = customXmlPart.getXml();\n\n    await context.sync();\n\n    let readableXml = addLineBreaksToXML(xmlBlob.value);\n    $(\"#display-xml\").text(readableXml);\n\n    // Store the XML part's ID in a setting.\n    let settings = context.workbook.settings;\n    settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n    await context.sync();\n}\n```"
- name: namespaceUri
  uid: excel!Excel.CustomXmlPart#namespaceUri:member
  package: excel!
  fullName: namespaceUri
  summary: カスタム XML パーツの名前空間 URI。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly namespaceUri: string;'
    return:
      type: string
methods:
- name: delete()
  uid: excel!Excel.CustomXmlPart#delete:member(1)
  package: excel!
  fullName: delete()
  summary: カスタム XML パーツを削除します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let settings = context.workbook.settings;\n    let xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n        let xmlBlob = customXmlPart.getXml();\n        customXmlPart.delete();\n        customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n        await context.sync();\n\n        if (customXmlPart.isNullObject) {\n            $(\"#display-xml\").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);\n\n            // Delete the unneeded setting too.\n            xmlPartIDSetting.delete();            \n        } else {\n            let readableXml = addLineBreaksToXML(xmlBlob.value);\n            let strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\\n${readableXml}`\n            $(\"#display-xml\").text(strangeMessage);\n        }\n\n        await context.sync();\n    }\n}\n```"
- name: getXml()
  uid: excel!Excel.CustomXmlPart#getXml:member(1)
  package: excel!
  fullName: getXml()
  summary: カスタム XML パーツのすべての XML コンテンツを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getXml(): ClientResult<string>;'
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    // You must have the xmlns attribute to populate the \n    // CustomXml.namespaceUri property.\n    let originalXml = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    let customXmlPart = context.workbook.customXmlParts.add(originalXml);\n    customXmlPart.load(\"id\");\n    let xmlBlob = customXmlPart.getXml();\n\n    await context.sync();\n\n    let readableXml = addLineBreaksToXML(xmlBlob.value);\n    $(\"#display-xml\").text(readableXml);\n\n    // Store the XML part's ID in a setting.\n    let settings = context.workbook.settings;\n    settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n    await context.sync();\n}\n```"
- name: load(propertyNames)
  uid: excel!Excel.CustomXmlPart#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type: string | string[]
    return:
      type: void
      description: ''
- name: setXml(xml)
  uid: excel!Excel.CustomXmlPart#setXml:member(1)
  package: excel!
  fullName: setXml(xml)
  summary: カスタム XML パーツのすべての XML コンテンツを設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setXml(xml: string): void;'
    parameters:
    - id: xml
      description: パーツの XML コンテンツ。
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let settings = context.workbook.settings;\n    let xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n\n        // The setXml method does a whole-for-whole replacement \n        // of the entire XML.\n        customXmlPart.setXml(\"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>\");\n        let xmlBlob = customXmlPart.getXml();\n        await context.sync();\n\n        let readableXml = addLineBreaksToXML(xmlBlob.value);\n        $(\"#display-xml\").text(readableXml);\n        await context.sync();\n    }\n}\n```"
metadata:
  ms.openlocfilehash: c55f5ddefe1cebc6799f2a4023cc18b28e959254
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49414056"
