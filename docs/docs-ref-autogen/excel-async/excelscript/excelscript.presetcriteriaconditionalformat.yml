### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat:interface'
    summary: 既定の抽出条件の条件付き書式 (average、average、error、および noerror を含む) を表します。
    name: Excel.PresetCriteriaConditionalFormat
    fullName: Excel.PresetCriteriaConditionalFormat
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.PresetCriteriaConditionalFormat#format:member'
      - 'excel!Excel.PresetCriteriaConditionalFormat#load:member(1)'
      - 'excel!Excel.PresetCriteriaConditionalFormat#rule:member'
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat#format:member'
    summary: 書式設定オブジェクトを返し、条件付き書式のフォント、塗りつぶし、罫線などのプロパティをカプセル化します。
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: ConditionalRangeFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalRangeFormat:interface'
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat#rule:member'
    summary: 条件付き書式のルール。
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: ConditionalPresetCriteriaRule;'
      return:
        type:
          - 'excel!Excel.ConditionalPresetCriteriaRule:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          }
          ```
          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          }
          ```
references:
  - uid: 'excel!Excel.ConditionalRangeFormat:interface'
    name: ConditionalRangeFormat
    fullName: Excel.ConditionalRangeFormat
  - uid: 'excel!Excel.ConditionalPresetCriteriaRule:interface'
    name: ConditionalPresetCriteriaRule
    fullName: Excel.ConditionalPresetCriteriaRule