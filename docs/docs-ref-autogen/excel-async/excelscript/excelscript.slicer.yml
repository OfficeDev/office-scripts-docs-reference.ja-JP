### YamlMime:TSType
name: Excel.Slicer
uid: excel!Excel.Slicer:interface
package: excel!
fullName: Excel.Slicer
summary: ブック内のスライサーオブジェクトを表します。
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: caption
  uid: excel!Excel.Slicer#caption:member
  package: excel!
  fullName: caption
  summary: スライサーのキャプションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'caption: string;'
    return:
      type: string
- name: height
  uid: excel!Excel.Slicer#height:member
  package: excel!
  fullName: height
  summary: スライサーの高さ (ポイント数) を表します。 "引数が無効であるか、存在しないか、または形式が正しくありません。" という例外がスローされます。 負の値で設定した場合、または入力に0の場合は例外。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'height: number;'
    return:
      type: number
- name: id
  uid: excel!Excel.Slicer#id:member
  package: excel!
  fullName: id
  summary: スライサーの一意の ID を表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: isFilterCleared
  uid: excel!Excel.Slicer#isFilterCleared:member
  package: excel!
  fullName: isFilterCleared
  summary: スライサーに現在適用されているフィルターがすべて消去されている場合、true となります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isFilterCleared: boolean;'
    return:
      type: boolean
- name: left
  uid: excel!Excel.Slicer#left:member
  package: excel!
  fullName: left
  summary: スライサーの左側からワークシートの左までの距離を表します (ポイント数)。 "引数が無効であるか、存在しないか、または形式が正しくありません。" という例外がスローされます。 負の値を入力として設定した場合の例外。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'left: number;'
    return:
      type: number
- name: name
  uid: excel!Excel.Slicer#name:member
  package: excel!
  fullName: name
  summary: スライサーの名前を表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: slicerItems
  uid: excel!Excel.Slicer#slicerItems:member
  package: excel!
  fullName: slicerItems
  summary: スライサーに含まれる SlicerItems のコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicerItems: SlicerItemCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerItemCollection:interface" />
- name: sortBy
  uid: excel!Excel.Slicer#sortBy:member
  package: excel!
  fullName: sortBy
  summary: スライサーに含まれるアイテムの並べ替え順序を表します。 可能な値は、"DataSourceOrder"、"昇順"、"降順" です。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'sortBy: SlicerSortType | "DataSourceOrder" | "Ascending" | "Descending";'
    return:
      type: <xref uid="excel!Excel.SlicerSortType:enum" /> | "DataSourceOrder" | "Ascending" | "Descending"
- name: style
  uid: excel!Excel.Slicer#style:member
  package: excel!
  fullName: style
  summary: スライサー スタイルを表す定数値。 可能な値は次のとおりです。 "SlicerStyleLight1" は "SlicerStyleLight6"、"TableStyleOther1" ~ "TableStyleOther2"、"SlicerStyleDark1" ~ "SlicerStyleDark6" です。 ブックに存在するカスタムのユーザー定義スタイルも指定できます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.style = \"SlicerStyleLight6\";\n    await context.sync();\n}\n```"
- name: top
  uid: excel!Excel.Slicer#top:member
  package: excel!
  fullName: top
  summary: スライサーの上端からワークシートの上端までの距離を表します (ポイント数)。 "引数が無効であるか、存在しないか、または形式が正しくありません。" という例外がスローされます。 負の値を入力として設定した場合の例外。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'top: number;'
    return:
      type: number
- name: width
  uid: excel!Excel.Slicer#width:member
  package: excel!
  fullName: width
  summary: スライサーの幅 (ポイント数) を表します。 "引数が無効であるか、存在しないか、または形式が正しくありません。" という例外がスローされます。 負の値で設定した場合、または入力に0の場合は例外。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Slicer#worksheet:member
  package: excel!
  fullName: worksheet
  summary: スライサーを含んでいるワークシートを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
methods:
- name: clearFilters()
  uid: excel!Excel.Slicer#clearFilters:member(1)
  package: excel!
  fullName: clearFilters()
  summary: 現在スライサーに適用されているすべてのフィルターを消去します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFilters(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.clearFilters();\n    await context.sync();\n}\n```"
- name: delete()
  uid: excel!Excel.Slicer#delete:member(1)
  package: excel!
  fullName: delete()
  summary: スライサーを削除します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.slicers.getItemAt(0).delete();\n    await context.sync();\n}\n```"
- name: getSelectedItems()
  uid: excel!Excel.Slicer#getSelectedItems:member(1)
  package: excel!
  fullName: getSelectedItems()
  summary: 選択されたアイテムのキーの配列を返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedItems(): ClientResult<string[]>;'
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;string[]&gt;
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Slicer#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type: string | string[]
    return:
      type: void
      description: ''
- name: selectItems(items)
  uid: excel!Excel.Slicer#selectItems:member(1)
  package: excel!
  fullName: selectItems(items)
  summary: キーに基づいてスライサーアイテムを選択します。 以前の選択はクリアされます。 配列が空の場合、既定ではすべてのアイテムが選択されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'selectItems(items?: string[]): void;'
    parameters:
    - id: items
      description: 省略可能。 選択するスライサーアイテムの名前を指定します。
      type: string[]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.selectItems([\"Lemon\", \"Lime\", \"Orange\"]);\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 40b0e71f29db5f4c18ea35ab8b63508e16a64199
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49418416"
