### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:interface'
    summary: '範囲は、セル、行、列、セルのブロックなど、1つまたは複数の隣接するセルのセットを表します。API 全体で範囲を使用する方法の詳細については、「 [Excel JAVASCRIPT api を使用して範囲を操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)する」および「 [excel javascript api を使用して範囲を操作する (詳細)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced) 」を参照してください。<!-- -->.'
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getPivotTables:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#group:member(1)'
      - 'excel!Excel.Range#height:member'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hideGroupDetails:member(1)'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#left:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#moveTo:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(1)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#top:member'
      - 'excel!Excel.Range#ungroup:member(1)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#width:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: 'セル範囲の参照を A1 形式で指定します。 Address 値にはシート参照が含まれます (例: "Sheet1!A1: B4 ")'
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: ユーザーの言語で指定された範囲の範囲参照を指定します。
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      指定したオートフィルロジックを使用して、現在の範囲から移動先の範囲に範囲を埋めます。 変換先の範囲は null にすることも、ソースを水平方向または垂直方向に拡張することもできます。 連続していない範囲はサポートされていません。

      詳細については、「[オートフィルおよびフラッシュフィルの使用](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)」を参照してください。<!-- -->.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?:
                        | AutoFillType
                        | "FillDefault"
                        | "FillCopy"
                        | "FillSeries"
                        | "FillFormats"
                        | "FillValues"
                        | "FillDays"
                        | "FillWeekdays"
                        | "FillMonths"
                        | "FillYears"
                        | "LinearTrend"
                        | "GrowthTrend"
                        | "FlashFill"
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
            let sheet = context.workbook.worksheets.getActiveWorksheet();
            let sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          }
          ```
      parameters:
        - id: destinationRange
          description: オートフィルの対象となるセル範囲を指定します。 引数 destination に null を指定すると、周囲のセル (UI の範囲の塗りつぶしハンドルをダブルクリックしたときの動作) に基づいてデータが入力されます。
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: オートフィルの種類を示します。 現在の範囲の内容に基づいて、移動先の範囲をどのように塗りつぶすかを指定します。 既定値は "FillDefault" です。
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: ワークシート上のセルの範囲を計算します。
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: '範囲内のセルの数を指定します。 セルの数が 2^31-1 (2,147,483,647) を超えると、この API は -1 を返します。'
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: 範囲の値、書式、塗りつぶし、罫線などをクリアします。
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        clear(
                    applyTo?:
                        | ClearApplyTo
                        | "All"
                        | "Formats"
                        | "Contents"
                        | "Hyperlinks"
                        | "RemoveHyperlinks"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: 省略可能。 クリア操作の種類を決定します。 詳細については、「Excel. ClearApplyTo」を参照してください。
          type:
            - 'excel!Excel.Range#clear~0:complex'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: 範囲内の列の合計数を指定します。
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: 現在の範囲のすべての列が非表示になっているかどうかを表します。
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: 範囲内の最初のセルの列番号を指定します。 0 を起点とする番号になります。
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: 範囲と交差する ConditionalFormats のコレクションです。
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:interface'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: データ型を含む範囲セルをテキストに変換します。
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: ワークシート内で範囲セルをリンク付きデータ型に変換します。
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: データのクエリに使用されるサービス ID。
          type:
            - number
        - id: languageCulture
          description: サービスを照会する言語カルチャ。
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: ソース範囲または RangeAreas から現在の範囲にセル データまたは書式設定をコピーします。 コピー先の範囲は、元の範囲または RangeAreas のサイズと異なる場合があります。 転送先は、ソースよりも小さい場合は自動的に展開されます。
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?:
                        | RangeCopyType
                        | "All"
                        | "Formulas"
                        | "Values"
                        | "Formats",
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          }
          ```
      parameters:
        - id: sourceRange
          description: コピー元の範囲または RangeAreas を指定します。 ソース範囲に複数の範囲がある場合は、四角形の範囲から完全な行または列を削除することによって、そのフォームを作成できるようにする必要があります。
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: コピーするセルのデータまたは書式の種類を指定します。 既定値は "すべて" です。
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: skipBlanks
          description: True の場合は、ソース範囲の空白セルをスキップします。 既定値は false です。
          type:
            - boolean
        - id: transpose
          description: True を指定すると、貼り付け先の範囲内のセルが転置されます。 既定値は false です。
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: dataValidation オブジェクトを返します。
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:interface'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: 範囲に関連付けられているセルを削除します。
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection | "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: セルをシフトする方向を指定します。 詳細については、「DeleteShiftDirection」を参照してください。
          type:
            - 'excel!Excel.Range#delete~0:complex'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: 指定された条件に基づいて指定された文字列を見つけます。 現在の範囲が1つのセルより大きい場合は、検索はその範囲に制限されます。それ以外の場合は、シート全体がそのセルの後に表示されます。
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: text
          description: 検索する文字列を指定します。
          type:
            - string
        - id: criteria
          description: 検索の方向、検索をセル全体に一致させる必要があるかどうか、または大文字と小文字を区別するかどうかを含む、追加の検索条件。
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: 指定された条件に基づいて指定された文字列を見つけます。 現在の範囲が1つのセルより大きい場合は、検索はその範囲に制限されます。それ以外の場合は、シート全体がそのセルの後に表示されます。 一致しない場合、この関数は null オブジェクトを返します。
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let table = sheet.tables.getItem("ExpensesTable");
              let searchRange = table.getRange();
              let foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          }
          ```
      parameters:
        - id: text
          description: 検索する文字列を指定します。
          type:
            - string
        - id: criteria
          description: 検索の方向、検索をセル全体に一致させる必要があるかどうか、または大文字と小文字を区別するかどうかを含む、追加の検索条件。
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: 現在の範囲に対してフラッシュ フィルを実行します。フラッシュ フィルでは、パターンを感知して自動的にデータが設定されるので、範囲は単一列範囲で、かつパターンを検出できるように周囲にデータが存在する必要があります。
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: Format オブジェクト (範囲のフォント、塗りつぶし、罫線、配置などのプロパティをカプセル化するオブジェクト) を返します。
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:interface'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: A1 スタイル表記の数式を表します。
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: 'ユーザーの言語と数値書式ロケールで、A1 スタイル表記の数式を表します。たとえば、英語の数式 "=SUM(A1, 1.5)" は、ドイツ語では "=SUMME(A1; 1,5)" になります。'
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: R1C1 スタイル表記の数式を表します。
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: 現在の Range オブジェクトと左上のセルが同じで、指定した数の行と列を含む Range オブジェクトを取得します。
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: 新しい範囲サイズの行数を指定します。
          type:
            - number
        - id: numColumns
          description: 新しい範囲のサイズの列数を指定します。
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: '指定した範囲を包含する、最小の Range オブジェクトを取得します。 たとえば、"B2:C5" と "D10:E15" の GetBoundingRect は、"B2:E15" になります。'
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: Range オブジェクト、アドレスまたは範囲名。
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: 行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。 ワークシートのグリッド内に収まるセルは、親の範囲の境界の外側にある場合があります。 返されるセルは、範囲の左上のセルを基準に配置されます。
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: 取得するセルの行番号。 0 を起点とする番号になります。
          type:
            - number
        - id: column
          description: 取得セルの列番号。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: 範囲に含まれる列を 1 つ取得します。
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: column
          description: 取得する範囲の列番号。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: 現在の Range オブジェクトの右にある特定の列数を取得します。
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 省略可能。結果の範囲に含める列の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: 現在の Range オブジェクトの左にある特定の列数を取得します。
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 省略可能。結果の範囲に含める列の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: '範囲の列全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4: E11" を表している場合 `getEntireColumn` は、"B: E" という列を表す範囲)。'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: '範囲の行全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4: E11" を表している場合 `GetEntireRow` は、行 "4:11" を表す範囲になります)。'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: 範囲を base64 でエンコードされた png 画像としてレンダリングします。
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: 指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: 指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。 交差部分が見つからない場合は、null オブジェクトを返します。
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              let usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              let currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              let asianSalesRange = sheet.getRange("A2:E4");
              let europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              let asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              let europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          }
          ```
      parameters:
        - id: anotherRange
          description: 範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: '範囲内の最後のセルを取得します。 たとえば、"B2:D5" の最後のセルは "D5" になります。'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: '範囲内の最後の列を取得します。 たとえば、"B2:D5" の最後の列は "D2:D5" になります。'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: '範囲内の最後の行を取得します。 たとえば、"B2:D5" の最後の行は "B5:D5" になります。'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: 指定した範囲からのオフセットで範囲を表すオブジェクトを取得します。返される範囲のディメンションは、この範囲と一致します。結果の範囲がワークシートのグリッドの境界線の外にはみ出る場合は、エラーがスローされます。
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: rowOffset
          description: 範囲をオフセットする行数 (正、負、または 0)。正の値は下方向へのオフセットです。また、負の値は上方向へのオフセットです。
          type:
            - number
        - id: columnOffset
          description: 範囲をオフセットする列数 (正、負、または 0)。正の値は右方向へのオフセットです。また、負の値は左方向へのオフセットです。
          type:
            - number
  - uid: 'excel!Excel.Range#getPivotTables:member(1)'
    summary: 範囲に重なっているピボットテーブルのスコープ設定されたコレクションを取得します。
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTableScopedCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: True の場合は、範囲範囲内に完全に含まれるピボットテーブルのみを返します。 既定値は false です。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: 現在の Range オブジェクトに似た (ただし、右下隅がいくつかの行と列で拡張 (または縮小) されている) Range オブジェクトを取得します。
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: deltaRows
          description: 現在の範囲を基準にして、右下隅を拡張する行の数です。範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。
          type:
            - number
        - id: deltaColumns
          description: 現在の範囲を基準にして、右下隅を展開する列数を指定します。 範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: 範囲に含まれている行を 1 つ取得します。
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: 取得する範囲の行番号。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: 現在の Range オブジェクトの上にある特定の行数を取得します。
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 省略可能。結果の範囲に含める行の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: 現在の Range オブジェクトの下にある特定の行数を取得します。
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 省略可能。結果の範囲に含める行の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: 指定された型と値に一致するすべてのセルを表し、1 つまたは複数の長方形範囲で構成される RangeAreas オブジェクトを取得します。 特別なセルが見つからない場合は、ItemNotFound エラーがスローされます。
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 含めるセルの種類を指定します。
          type:
            - 'excel!Excel.Range#getSpecialCells~0:complex'
        - id: cellValueType
          description: CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。 これらの値は、組み合わせて複数の型を返すことができます。 この引数を省略すると、すべての定数および数式が対象になります。
          type:
            - 'excel!Excel.Range#getSpecialCells~1:complex'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: 指定された型と値に一致するすべてのセルを表し、1 つまたは複数の範囲を構成する RangeAreas オブジェクトを取得します。 特別なセルが見つからない場合は、null オブジェクトが返されます。
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCellsOrNullObject(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 含めるセルの種類を指定します。
          type:
            - 'excel!Excel.Range#getSpecialCellsOrNullObject~0:complex'
        - id: cellValueType
          description: CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。 これらの値は、組み合わせて複数の型を返すことができます。 この引数を省略すると、すべての定数および数式が対象になります。
          type:
            - 'excel!Excel.Range#getSpecialCellsOrNullObject~1:complex'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: 指定された範囲の左上のセルを囲む領域を表す Range オブジェクトを返します。 周囲の領域は、この範囲に相対の空白の行と空白の列の任意の組み合わせで囲まれた範囲です。
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: 範囲と重なるテーブルの集まりを範囲限定で取得します。
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: True の場合は、範囲範囲内に完全に含まれるテーブルのみを返します。 既定値は false です。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: 指定した範囲オブジェクトのうち使用されている範囲を返します。範囲内に使用済みのセルがない場合、この関数は ItemNotFound エラーをスローします。
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 値の入っているセルのみを使用セルと見なします。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: 指定した範囲オブジェクトのうち使用されている範囲を返します。範囲内に使用済みのセルがない場合、この関数は null オブジェクトを返します。
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              let usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  let chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          }
          ```
      parameters:
        - id: valuesOnly
          description: 値の入っているセルのみを使用セルと見なします。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: 現在の範囲の表示されている行を表します。
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:interface'
        description: ''
  - uid: 'excel!Excel.Range#group:member(1)'
    summary: アウトラインの列と行をグループ化します。
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          }
          ```
      parameters:
        - id: groupOption
          description: 行または列によって範囲をグループ化する方法を指定します。 `InvalidArgument`グループのオプションが範囲のまたはプロパティと異なる場合、エラーがスローされます `isEntireRow` `isEntireColumn` (つまり、true で、 `range.isEntireRow` `groupOption` "bycolumns" または True で、 `range.isEntireColumn` `groupOption` "bycolumns")。
          type:
            - 'excel!Excel.Range#group~0:complex'
  - uid: 'excel!Excel.Range#height:member'
    summary: '100% ズームの場合の、範囲の上端から範囲の下端までの距離を、ポイント単位で返します。 '
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#hidden:member'
    summary: 現在の範囲のすべてのセルが非表示になっているかどうかを表します。
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    summary: 行または列グループの詳細を非表示にします。
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        hideGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: グループ化された行または列のグループ化の詳細を非表示にするかどうかを指定します。
          type:
            - 'excel!Excel.Range#hideGroupDetails~0:complex'
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: 現在の範囲のハイパーリンクを表します。
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: この範囲を占めるセルまたはセルの範囲をワークシートに挿入し、領域を空けるために他のセルをシフトします。この時点で空き領域に位置する、新しい Range オブジェクトが返されます。
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection | "Down" | "Right"): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: セルをシフトする方向を指定します。 詳細については、「InsertShiftDirection」を参照してください。
          type:
            - 'excel!Excel.Range#insert~0:complex'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: 現在の範囲が列全体であるかどうかを表します。
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: 現在の範囲が行全体であるかどうかを表します。
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#left:member'
    summary: '100% ズームの場合の、ワークシートの左端から範囲の左端までの距離を、ポイント単位で返します。 '
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: 各セルのデータ型の状態を表します。
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: 範囲内のセルをワークシートの 1 つの領域に結合します。
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: 省略可能。 指定した範囲のセルを行ごとに結合して、行ごとに別のセルを作成する場合は True に設定します。 既定値は False です。
          type:
            - boolean
  - uid: 'excel!Excel.Range#moveTo:member(1)'
    summary: セルの値、書式設定、および数式を現在の範囲から移動先の範囲に移動し、そのセルの古い情報を置き換えます。 移動先の範囲は、現在の範囲よりも小さい場合は自動的に展開されます。 元の範囲の領域の外にある、移動先の範囲内のすべてのセルが変更されることはありません。
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange この範囲内の情報の移動先となる範囲を指定します。
          type:
            - 'excel!Excel.Range#moveTo~0:complex'
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: 指定された範囲の Excel の数値書式コードを表します。
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: ユーザーの言語設定に基づいて、指定された範囲の Excel の数値書式コードを表します。 Excel では、プロパティを取得または設定するときに、言語や書式の強制変換は実行されません `numberFormatLocal` 。 返されるテキストには、システム設定で指定された言語に基づいてローカルに書式設定された文字列が使用されます。
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: 列によって指定される範囲から重複する値を削除します。
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:D11");

              let deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          }
          ```
      parameters:
        - id: columns
          description: 重複が含まれる可能性がある範囲内の列。 少なくとも1つの列を指定する必要があります。 0 を起点とする番号になります。
          type:
            - 'number[]'
        - id: includesHeader
          description: True の場合は、入力データにヘッダーが含まれています。 既定値は false です。
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: 現在の範囲内で、指定された条件に基づき、指定された文字列を検索し、置換します。
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: ''
      parameters:
        - id: text
          description: 検索する文字列を指定します。
          type:
            - string
        - id: replacement
          description: 元のと置き換える文字列。
          type:
            - string
        - id: criteria
          description: 置換条件を追加します。
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: 範囲に含まれる行の合計数を返します。
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: 現在の範囲のすべての行が非表示になっているかどうかを表します。
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: 範囲に含まれる最初のセルの行番号を返します。 0 を起点とする番号になります。
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: Excel UI で指定した範囲を選択します。
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: 次の再計算が発生したときに再計算する範囲を設定します。
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: アクティブ セルに多数の値が含まれる場合、そのセルのカードを表示します。
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    summary: 行または列グループの詳細を表示します。
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        showGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: グループ化された行またはグループ化された列の詳細を表示するかどうかを指定します。
          type:
            - 'excel!Excel.Range#showGroupDetails~0:complex'
  - uid: 'excel!Excel.Range#sort:member'
    summary: 現在の範囲について、範囲の並べ替えを表します。
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let range = sheet.getRange("A1:E5");

              // Find the column header that provides the sort criteria.
              let header = range.find(criteria, {});
              header.load("columnIndex");
              await context.sync();

              range.sort.apply(
                  [
                      {
                          key: header.columnIndex,
                          sortOn: Excel.SortOn.value
                      }
                  ],
                  false /*matchCase*/,
                  true /*hasHeaders*/,
                  Excel.SortOrientation.rows
              );
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: 現在の範囲のスタイルを表します。 セルのスタイルに不整合がある場合は、null が返されます。 ユーザー設定のスタイルの場合は、スタイル名が返されます。 組み込みのスタイルの場合、BuiltInStyle 列挙内の値を表す文字列が返されます。
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: 指定した範囲のテキスト値。 テキスト値は、セルの幅には依存しません。 \#EXCEL UI で行われた符号置換は、API によって返されるテキスト値には影響しません。
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#top:member'
    summary: '100% ズームの場合の、ワークシートの上端から範囲の上端までの距離を、ポイント単位で返します。 '
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#ungroup:member(1)'
    summary: アウトラインの列と行のグループ化を解除します。
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          }
          ```
      parameters:
        - id: groupOption
          description: 行または列によって範囲をグループ解除する方法を指定します。
          type:
            - 'excel!Excel.Range#ungroup~0:complex'
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: 範囲内のセルを結合解除して別々のセルにします。
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#values:member'
    summary: 指定した範囲の Raw 値を表します。 返されるデータの型は、文字列、数値、ブール値のいずれかになります。 エラーが含まれているセルは、エラー文字列を返します。
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: 各セルのデータの種類を指定します。
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#width:member'
    summary: '100% ズームの場合の、範囲の左端から範囲の右端までの距離を、ポイント単位で返します。 '
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: 現在の範囲を含んでいるワークシート。
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
references:
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: |-
      | AutoFillType
                      | "FillDefault"
                      | "FillCopy"
                      | "FillSeries"
                      | "FillFormats"
                      | "FillValues"
                      | "FillDays"
                      | "FillWeekdays"
                      | "FillMonths"
                      | "FillYears"
                      | "LinearTrend"
                      | "GrowthTrend"
                      | "FlashFill"
    fullName: |-
      | Excel.AutoFillType
                      | "FillDefault"
                      | "FillCopy"
                      | "FillSeries"
                      | "FillFormats"
                      | "FillValues"
                      | "FillDays"
                      | "FillWeekdays"
                      | "FillMonths"
                      | "FillYears"
                      | "LinearTrend"
                      | "GrowthTrend"
                      | "FlashFill"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.AutoFillType:enum'
        name: AutoFillType
        fullName: Excel.AutoFillType
      - name: |2-

                          | "FillDefault"
                          | "FillCopy"
                          | "FillSeries"
                          | "FillFormats"
                          | "FillValues"
                          | "FillDays"
                          | "FillWeekdays"
                          | "FillMonths"
                          | "FillYears"
                          | "LinearTrend"
                          | "GrowthTrend"
                          | "FlashFill"
                  
        fullName: |2-

                          | "FillDefault"
                          | "FillCopy"
                          | "FillSeries"
                          | "FillFormats"
                          | "FillValues"
                          | "FillDays"
                          | "FillWeekdays"
                          | "FillMonths"
                          | "FillYears"
                          | "LinearTrend"
                          | "GrowthTrend"
                          | "FlashFill"
                  
  - uid: 'excel!Excel.Range#clear~0:complex'
    name: |-
      | ClearApplyTo
                      | "All"
                      | "Formats"
                      | "Contents"
                      | "Hyperlinks"
                      | "RemoveHyperlinks"
    fullName: |-
      | Excel.ClearApplyTo
                      | "All"
                      | "Formats"
                      | "Contents"
                      | "Hyperlinks"
                      | "RemoveHyperlinks"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.ClearApplyTo:enum'
        name: ClearApplyTo
        fullName: Excel.ClearApplyTo
      - name: |2-

                          | "All"
                          | "Formats"
                          | "Contents"
                          | "Hyperlinks"
                          | "RemoveHyperlinks"
                  
        fullName: |2-

                          | "All"
                          | "Formats"
                          | "Contents"
                          | "Hyperlinks"
                          | "RemoveHyperlinks"
                  
  - uid: 'excel!Excel.ConditionalFormatCollection:interface'
    name: ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: |-
      | RangeCopyType
                      | "All"
                      | "Formulas"
                      | "Values"
                      | "Formats"
    fullName: |-
      | Excel.RangeCopyType
                      | "All"
                      | "Formulas"
                      | "Values"
                      | "Formats"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.RangeCopyType:enum'
        name: RangeCopyType
        fullName: Excel.RangeCopyType
      - name: |2-

                          | "All"
                          | "Formulas"
                          | "Values"
                          | "Formats"
        fullName: |2-

                          | "All"
                          | "Formulas"
                          | "Values"
                          | "Formats"
  - uid: 'excel!Excel.DataValidation:interface'
    name: DataValidation
    fullName: Excel.DataValidation
  - uid: 'excel!Excel.Range#delete~0:complex'
    name: DeleteShiftDirection | "Up" | "Left"
    fullName: Excel.DeleteShiftDirection | "Up" | "Left"
    spec.typeScript:
      - uid: 'excel!Excel.DeleteShiftDirection:enum'
        name: DeleteShiftDirection
        fullName: Excel.DeleteShiftDirection
      - name: ' | "Up" | "Left"'
        fullName: ' | "Up" | "Left"'
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: SearchCriteria
    fullName: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:interface'
    name: RangeFormat
    fullName: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: ClientResult<string>
    fullName: Excel.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PivotTableScopedCollection:interface'
    name: PivotTableScopedCollection
    fullName: Excel.PivotTableScopedCollection
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.Range#getSpecialCells~0:complex'
    name: |-
      | SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    fullName: |-
      | Excel.SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellType:enum'
        name: SpecialCellType
        fullName: Excel.SpecialCellType
      - name: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
        fullName: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
  - uid: 'excel!Excel.Range#getSpecialCells~1:complex'
    name: |-
      | SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    fullName: |-
      | Excel.SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellValueType:enum'
        name: SpecialCellValueType
        fullName: Excel.SpecialCellValueType
      - name: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
        fullName: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject~0:complex'
    name: |-
      | SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    fullName: |-
      | Excel.SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellType:enum'
        name: SpecialCellType
        fullName: Excel.SpecialCellType
      - name: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
        fullName: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject~1:complex'
    name: |-
      | SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    fullName: |-
      | Excel.SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellValueType:enum'
        name: SpecialCellValueType
        fullName: Excel.SpecialCellValueType
      - name: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
        fullName: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
  - uid: 'excel!Excel.TableScopedCollection:interface'
    name: TableScopedCollection
    fullName: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:interface'
    name: RangeView
    fullName: Excel.RangeView
  - uid: 'excel!Excel.Range#group~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: ' | "ByRows" | "ByColumns"'
        fullName: ' | "ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hideGroupDetails~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: |2-
           | "ByRows" | "ByColumns"
                  
        fullName: |2-
           | "ByRows" | "ByColumns"
                  
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: Excel.RangeHyperlink
  - uid: 'excel!Excel.Range#insert~0:complex'
    name: InsertShiftDirection | "Down" | "Right"
    fullName: Excel.InsertShiftDirection | "Down" | "Right"
    spec.typeScript:
      - uid: 'excel!Excel.InsertShiftDirection:enum'
        name: InsertShiftDirection
        fullName: Excel.InsertShiftDirection
      - name: ' | "Down" | "Right"'
        fullName: ' | "Down" | "Right"'
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#moveTo~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Range#showGroupDetails~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: |2-
           | "ByRows" | "ByColumns"
                  
        fullName: |2-
           | "ByRows" | "ByColumns"
                  
  - uid: 'excel!Excel.RangeSort:interface'
    name: RangeSort
    fullName: Excel.RangeSort
  - uid: 'excel!Excel.Range#ungroup~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: ' | "ByRows" | "ByColumns"'
        fullName: ' | "ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet