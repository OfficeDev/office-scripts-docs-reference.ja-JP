### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidation:interface'
    summary: '現在の範囲に適用されるデータの入力規則を表します。 データ検証オブジェクトモデルの詳細については、「 [Excel 範囲へのデータ検証の追加](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)」を参照してください。<!-- -->.'
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.DataValidation#clear:member(1)'
      - 'excel!Excel.DataValidation#errorAlert:member'
      - 'excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)'
      - 'excel!Excel.DataValidation#ignoreBlanks:member'
      - 'excel!Excel.DataValidation#load:member(1)'
      - 'excel!Excel.DataValidation#prompt:member'
      - 'excel!Excel.DataValidation#rule:member'
      - 'excel!Excel.DataValidation#type:member'
      - 'excel!Excel.DataValidation#valid:member'
  - uid: 'excel!Excel.DataValidation#clear:member(1)'
    summary: 現在の範囲からデータの入力規則をクリアします。
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.DataValidation#errorAlert:member'
    summary: 無効なデータが入力された場合のエラー警告。
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: DataValidationErrorAlert;'
      return:
        type:
          - 'excel!Excel.DataValidationErrorAlert:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)'
    summary: 1 つまたは複数の長方形範囲で構成され、無効なセル値を含む RangeAreas を返します。 すべてのセル値が有効な場合、この関数からは null が返されます。
    name: getInvalidCellsOrNullObject()
    fullName: getInvalidCellsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCellsOrNullObject(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.DataValidation#ignoreBlanks:member'
    summary: 空白セルでデータの入力規則を実行するかどうかを指定します。既定では true に設定されています。
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.DataValidation#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.DataValidation#prompt:member'
    summary: ユーザーがセルを選択したときにメッセージを表示します。
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: DataValidationPrompt;'
      return:
        type:
          - 'excel!Excel.DataValidationPrompt:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidation#rule:member'
    summary: さまざまな種類のデータ検証条件を含むデータ入力規則。
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: DataValidationRule;'
      return:
        type:
          - 'excel!Excel.DataValidationRule:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              let nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidation#type:member'
    summary: データの入力規則の種類。詳細については、Excel.DataValidationType を参照してください。
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: DataValidationType;'
      return:
        type:
          - 'excel!Excel.DataValidationType:enum'
  - uid: 'excel!Excel.DataValidation#valid:member'
    summary: すべてのセルの値がデータの入力規則に従っているかどうかを表します。 すべてのセルの値が有効な場合は true、すべてのセルの値が無効な場合は false を返します。 範囲内に有効で無効なセル値がある場合は、null を返します。
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean
references:
  - uid: 'excel!Excel.DataValidationErrorAlert:interface'
    name: DataValidationErrorAlert
    fullName: Excel.DataValidationErrorAlert
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.DataValidationPrompt:interface'
    name: DataValidationPrompt
    fullName: Excel.DataValidationPrompt
  - uid: 'excel!Excel.DataValidationRule:interface'
    name: DataValidationRule
    fullName: Excel.DataValidationRule
  - uid: 'excel!Excel.DataValidationType:enum'
    name: DataValidationType
    fullName: Excel.DataValidationType