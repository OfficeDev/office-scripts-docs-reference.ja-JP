### YamlMime:TSType
name: Excel.DataValidation
uid: excel!Excel.DataValidation:interface
package: excel!
fullName: Excel.DataValidation
summary: 現在の範囲に適用されるデータの入力規則を表します。 データ検証オブジェクトモデルの詳細については、「 [Excel 範囲へのデータ検証の追加](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)」を参照してください。<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: errorAlert
  uid: excel!Excel.DataValidation#errorAlert:member
  package: excel!
  fullName: errorAlert
  summary: 無効なデータが入力された場合のエラー警告。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'errorAlert: DataValidationErrorAlert;'
    return:
      type: <xref uid="excel!Excel.DataValidationErrorAlert:interface" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let commentsRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Comments\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    commentsRange.dataValidation.clear();   \n\n    // If the value of A2 is contained in the value of C2, then \n    // SEARCH(A2,C2) returns the number where it begins. Otherwise,\n    // it does not return a number.\n    let redundantStringRule = {\n        custom: {\n            formula: \"=NOT(ISNUMBER(SEARCH(A2,C2)))\"\n        }\n    };\n    commentsRange.dataValidation.rule = redundantStringRule;\n    commentsRange.dataValidation.errorAlert = {\n        message: \"It is redundant to include the baby name in the comment.\",\n        showAlert: true,\n        style: \"Information\",\n        title: \"Baby Name in Comment\"\n    };\n\n    await context.sync();\n}\n```"
- name: ignoreBlanks
  uid: excel!Excel.DataValidation#ignoreBlanks:member
  package: excel!
  fullName: ignoreBlanks
  summary: 空白セルでデータの入力規則を実行するかどうかを指定します。既定では true に設定されています。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ignoreBlanks: boolean;'
    return:
      type: boolean
- name: prompt
  uid: excel!Excel.DataValidation#prompt:member
  package: excel!
  fullName: prompt
  summary: ユーザーがセルを選択したときにメッセージを表示します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prompt: DataValidationPrompt;'
    return:
      type: <xref uid="excel!Excel.DataValidationPrompt:interface" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n}\n```"
- name: rule
  uid: excel!Excel.DataValidation#rule:member
  package: excel!
  fullName: rule
  summary: さまざまな種類のデータ検証条件を含むデータ入力規則。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rule: DataValidationRule;'
    return:
      type: <xref uid="excel!Excel.DataValidationRule:interface" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    let nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: nameSourceRange\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n}\n```"
- name: type
  uid: excel!Excel.DataValidation#type:member
  package: excel!
  fullName: type
  summary: データの入力規則の種類。詳細については、Excel.DataValidationType を参照してください。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      readonly type:
                  | DataValidationType
                  | "None"
                  | "WholeNumber"
                  | "Decimal"
                  | "List"
                  | "Date"
                  | "Time"
                  | "TextLength"
                  | "Custom"
                  | "Inconsistent"
                  | "MixedCriteria";
    return:
      type: >-
        | <xref uid="excel!Excel.DataValidationType:enum" />
                    | "None"
                    | "WholeNumber"
                    | "Decimal"
                    | "List"
                    | "Date"
                    | "Time"
                    | "TextLength"
                    | "Custom"
                    | "Inconsistent"
                    | "MixedCriteria"
- name: valid
  uid: excel!Excel.DataValidation#valid:member
  package: excel!
  fullName: valid
  summary: すべてのセルの値がデータの入力規則に従っているかどうかを表します。 すべてのセルの値が有効な場合は true、すべてのセルの値が無効な場合は false を返します。 範囲内に有効で無効なセル値がある場合は、null を返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valid: boolean;'
    return:
      type: boolean
methods:
- name: clear()
  uid: excel!Excel.DataValidation#clear:member(1)
  package: excel!
  fullName: clear()
  summary: 現在の範囲からデータの入力規則をクリアします。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: getInvalidCells()
  uid: excel!Excel.DataValidation#getInvalidCells:member(1)
  package: excel!
  fullName: getInvalidCells()
  summary: 1 つまたは複数の長方形範囲で構成され、無効なセル値を含む RangeAreas を返します。 すべてのセル値が有効な場合、この関数からは ItemNotFound エラーがスローされます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCells(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: getInvalidCellsOrNullObject()
  uid: excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)
  package: excel!
  fullName: getInvalidCellsOrNullObject()
  summary: 1 つまたは複数の長方形範囲で構成され、無効なセル値を含む RangeAreas を返します。 すべてのセル値が有効な場合、この関数からは null が返されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCellsOrNullObject(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.DataValidation#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 6ba161c663afaf28f62aa0ad1f6b2e6bc3a2d9be
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49416289"
