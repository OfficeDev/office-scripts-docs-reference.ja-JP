### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Shape:interface'
    summary: 'ワークシートの標準図形オブジェクトを表します。 図形とは、幾何学的な図形、線、図形のグループなどのことです。Shape オブジェクトモデルの詳細については、「 [Excel JAVASCRIPT API を使用して図形を操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-shapes)する」を参照してください。<!-- -->.'
    name: Excel.Shape
    fullName: Excel.Shape
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Shape#altTextDescription:member'
      - 'excel!Excel.Shape#altTextTitle:member'
      - 'excel!Excel.Shape#connectionSiteCount:member'
      - 'excel!Excel.Shape#copyTo:member(1)'
      - 'excel!Excel.Shape#delete:member(1)'
      - 'excel!Excel.Shape#fill:member'
      - 'excel!Excel.Shape#geometricShape:member'
      - 'excel!Excel.Shape#geometricShapeType:member'
      - 'excel!Excel.Shape#getAsImage:member(1)'
      - 'excel!Excel.Shape#group:member'
      - 'excel!Excel.Shape#height:member'
      - 'excel!Excel.Shape#id:member'
      - 'excel!Excel.Shape#image:member'
      - 'excel!Excel.Shape#incrementLeft:member(1)'
      - 'excel!Excel.Shape#incrementRotation:member(1)'
      - 'excel!Excel.Shape#incrementTop:member(1)'
      - 'excel!Excel.Shape#left:member'
      - 'excel!Excel.Shape#level:member'
      - 'excel!Excel.Shape#line:member'
      - 'excel!Excel.Shape#lineFormat:member'
      - 'excel!Excel.Shape#load:member(1)'
      - 'excel!Excel.Shape#lockAspectRatio:member'
      - 'excel!Excel.Shape#name:member'
      - 'excel!Excel.Shape#placement:member'
      - 'excel!Excel.Shape#rotation:member'
      - 'excel!Excel.Shape#scaleHeight:member(1)'
      - 'excel!Excel.Shape#scaleWidth:member(1)'
      - 'excel!Excel.Shape#setZOrder:member(1)'
      - 'excel!Excel.Shape#textFrame:member'
      - 'excel!Excel.Shape#top:member'
      - 'excel!Excel.Shape#type:member'
      - 'excel!Excel.Shape#visible:member'
      - 'excel!Excel.Shape#width:member'
      - 'excel!Excel.Shape#zOrderPosition:member'
  - uid: 'excel!Excel.Shape#altTextDescription:member'
    summary: Shape オブジェクトの代替説明テキストを指定します。
    name: altTextDescription
    fullName: altTextDescription
    langs:
      - typeScript
    type: property
    syntax:
      content: 'altTextDescription: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Shape#altTextTitle:member'
    summary: Shape オブジェクトの代替タイトルテキストを指定します。
    name: altTextTitle
    fullName: altTextTitle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'altTextTitle: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Shape#connectionSiteCount:member'
    summary: この図形の結合点の数を返します。
    name: connectionSiteCount
    fullName: connectionSiteCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly connectionSiteCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Shape#copyTo:member(1)'
    summary: Shape オブジェクトをコピーして貼り付けます。 貼り付けられた図形は、この図形と同じピクセル位置にコピーされます。
    name: copyTo(destinationSheet)
    fullName: copyTo(destinationSheet)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyTo(destinationSheet?: Worksheet | string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: ''
      parameters:
        - id: destinationSheet
          description: Shape オブジェクトの貼り付け先となるシートを指定します。 既定値は、コピーされた図形のワークシートです。
          type:
            - 'excel!Excel.Shape#copyTo~0:complex'
  - uid: 'excel!Excel.Shape#delete:member(1)'
    summary: ワークシートから図形を削除します。
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              context.workbook.worksheets.getItemOrNullObject("Shapes").delete();
              let sheet = context.workbook.worksheets.add("Shapes");

              let shapes = sheet.shapes;

              // load all the shapes in the collection without loading their properties
              shapes.load("items/$none");
              await context.sync();

              shapes.items.forEach((shape) => shape.delete());
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Shape#fill:member'
    summary: この図形の塗りつぶしの書式設定を返します。
    name: fill
    fullName: fill
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly fill: ShapeFill;'
      return:
        type:
          - 'excel!Excel.ShapeFill:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.smileyFace);
              shape.left = 300;
              shape.top = 100;
              shape.height = 100;
              shape.width = 100;
              shape.fill.foregroundColor = "yellow"
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Shape#geometricShape:member'
    summary: 図形に関連付けられた幾何学的図形を返します。 図形の種類が "GeometricShape" ではない場合は、エラーがスローされます。
    name: geometricShape
    fullName: geometricShape
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly geometricShape: GeometricShape;'
      return:
        type:
          - 'excel!Excel.GeometricShape:interface'
  - uid: 'excel!Excel.Shape#geometricShapeType:member'
    summary: この幾何学図形の図形の種類を指定します。 詳細については、Excel.GeometricShapeType をご覧ください。 図形の種類が "GeometricShape" ではない場合は、null を返します。
    name: geometricShapeType
    fullName: geometricShapeType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'geometricShapeType: GeometricShapeType;'
      return:
        type:
          - 'excel!Excel.GeometricShapeType:enum'
  - uid: 'excel!Excel.Shape#getAsImage:member(1)'
    summary: '図形を画像に変換し、base 64 でエンコードされた文字列として画像を返します。 DPI は 96 です。 サポートされている形式は、`Excel.PictureFormat.BMP`<!-- -->, `Excel.PictureFormat.PNG`<!-- -->, `Excel.PictureFormat.JPEG`<!-- -->そして`Excel.PictureFormat.GIF`<!-- -->.'
    name: getAsImage(format)
    fullName: getAsImage(format)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsImage(format: PictureFormat): string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Image");
              let result = shape.getAsImage(Excel.PictureFormat.png);
              await context.sync();

              let imageString = result.value;
              // Your add-in would save this string as a .png file.
              console.log("The image's base64-encoded string: " + imageString);
          }
          ```
      parameters:
        - id: format
          description: 画像の形式を指定します。
          type:
            - 'excel!Excel.PictureFormat:enum'
  - uid: 'excel!Excel.Shape#group:member'
    summary: 図形に関連付けられた図形グループを返します。 図形の種類が "GroupShape" ではない場合は、エラーがスローされます。
    name: group
    fullName: group
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly group: ShapeGroup;'
      return:
        type:
          - 'excel!Excel.ShapeGroup:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");

              let shapeGroup = sheet.shapes.getItem("Group").group;
              shapeGroup.ungroup();
              console.log("Shapes ungrouped");

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Shape#height:member'
    summary: 図形の高さをポイント単位で指定します。 負の値を設定した場合、または入力に0を指定した場合、無効な引数の例外がスローされます。
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Shape#id:member'
    summary: 図形の識別子を指定します。
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Shape#image:member'
    summary: 図形に関連付けられた画像を返します。 図形の種類が "Image" ではない場合は、エラーがスローされます。
    name: image
    fullName: image
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly image: Image;'
      return:
        type:
          - 'excel!Excel.Image:interface'
  - uid: 'excel!Excel.Shape#incrementLeft:member(1)'
    summary: 指定したポイント数だけ水平方向に図形を移動します。
    name: incrementLeft(increment)
    fullName: incrementLeft(increment)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'incrementLeft(increment: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Square")
              shape.incrementLeft(-25);
              await context.sync();
          }
          ```
      parameters:
        - id: increment
          description: 図形を水平方向に移動するには、ポイント単位で指定します。 正の値を指定すると図形は右に移動し、負の値を指定すると左に移動します。 シートの方向が右から左の場合、正の値を指定すると、図形は左に移動し、負の値を指定すると右に移動します。
          type:
            - number
  - uid: 'excel!Excel.Shape#incrementRotation:member(1)'
    summary: z 軸を中心に、指定された度数だけ、図形を時計回りに回転します。 `rotation`図形の絶対回転角度を設定するには、プロパティを使用します。
    name: incrementRotation(increment)
    fullName: incrementRotation(increment)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'incrementRotation(increment: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Image");
              shape.incrementRotation(180);
              await context.sync();
          }
          ```
      parameters:
        - id: increment
          description: 図形を回転する角度を指定します。 正の値を指定すると図形は時計回りに回転し、負の値を指定すると反時計回りに回転します。
          type:
            - number
  - uid: 'excel!Excel.Shape#incrementTop:member(1)'
    summary: 指定したポイント数だけ垂直方向に図形を移動します。
    name: incrementTop(increment)
    fullName: incrementTop(increment)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'incrementTop(increment: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Pentagon")
              shape.incrementTop(25);
              await context.sync();
          }
          ```
      parameters:
        - id: increment
          description: 図形を垂直方向に移動するには、ポイント単位で指定します。 をポイント単位で指定します。 正の値を指定すると図形は下に移動し、負の値を指定すると上に移動します。
          type:
            - number
  - uid: 'excel!Excel.Shape#left:member'
    summary: 図形の左側からワークシートの左側までの距離 (ポイント数) です。 入力として負の値を設定すると、無効な引数の例外がスローされます。
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Shape#level:member'
    summary: 指定した図形のレベルを指定します。 たとえば、レベル 0 は図形がどのグループの一部でもないことを意味し、レベル 1 は図形が最上位グループの一部であることを意味し、レベル 2 は図形が最上位レベルのサブグループの一部であることを意味します。
    name: level
    fullName: level
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly level: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Shape#line:member'
    summary: 図形に関連付けられた線を返します。 図形の種類が "Line" ではない場合は、エラーがスローされます。
    name: line
    fullName: line
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly line: Line;'
      return:
        type:
          - 'excel!Excel.Line:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              let line = shapes.getItem("StraightLine").line;
              line.beginArrowheadLength = Excel.ArrowheadLength.long;
              line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
              line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

              line.endArrowheadLength = Excel.ArrowheadLength.long;
              line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
              line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Shape#lineFormat:member'
    summary: この図形の線の書式設定を返します。
    name: lineFormat
    fullName: lineFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly lineFormat: ShapeLineFormat;'
      return:
        type:
          - 'excel!Excel.ShapeLineFormat:interface'
  - uid: 'excel!Excel.Shape#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Shape#lockAspectRatio:member'
    summary: この図形の縦横比がロックされているかどうかを指定します。
    name: lockAspectRatio
    fullName: lockAspectRatio
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lockAspectRatio: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Octagon")
              shape.lockAspectRatio = true;
              shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Shape#name:member'
    summary: 図形の名前を指定します。
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Shape#placement:member'
    summary: オブジェクトがその下のセルに接続されている方法を表します。
    name: placement
    fullName: placement
    langs:
      - typeScript
    type: property
    syntax:
      content: 'placement: Placement;'
      return:
        type:
          - 'excel!Excel.Placement:enum'
  - uid: 'excel!Excel.Shape#rotation:member'
    summary: 図形の回転角度を度単位で指定します。
    name: rotation
    fullName: rotation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rotation: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.triangle);
              shape.left = 100;
              shape.top = 300;
              shape.height = 150;
              shape.width = 200;
              shape.rotation = 45;
              shape.fill.clear();
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Shape#scaleHeight:member(1)'
    summary: 指定した係数分だけ図形の高さを変更します。 画像の場合は、図形を元のサイズに対して拡大または縮小するのか、現在のサイズに対して拡大または縮小するのかを指定できます。 画像以外の図形の場合は、常に現在の高さに対して拡大または縮小されます。
    name: 'scaleHeight(scaleFactor, scaleType, scaleFrom)'
    fullName: 'scaleHeight(scaleFactor, scaleType, scaleFrom)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        scaleHeight(
                    scaleFactor: number,
                    scaleType: ShapeScaleType,
                    scaleFrom?: ShapeScaleFrom
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Octagon")
              shape.lockAspectRatio = true;
              shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
              await context.sync();
          }
          ```
      parameters:
        - id: scaleFactor
          description: 現在の高さと変更後の高さの比率、または元の高さと変更後の高さの比率を指定します。
          type:
            - number
        - id: scaleType
          description: 図形を元のサイズに対して拡大または縮小するかを指定します。 元のサイズスケーリングオプションは、イメージに対してのみ機能します。
          type:
            - 'excel!Excel.ShapeScaleType:enum'
        - id: scaleFrom
          description: 省略可能です。 図形を拡大縮小する場合、図形の位置を保持する部分を指定します。 省略すると、図形の左上隅の位置を保持します。
          type:
            - 'excel!Excel.ShapeScaleFrom:enum'
  - uid: 'excel!Excel.Shape#scaleWidth:member(1)'
    summary: 指定した係数分だけ図形の幅を変更します。 画像の場合は、図形を元のサイズに対して拡大または縮小するのか、現在のサイズに対して拡大または縮小するのかを指定できます。 画像以外の図形の場合は、常に現在の幅に対して拡大または縮小されます。
    name: 'scaleWidth(scaleFactor, scaleType, scaleFrom)'
    fullName: 'scaleWidth(scaleFactor, scaleType, scaleFrom)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        scaleWidth(
                    scaleFactor: number,
                    scaleType: ShapeScaleType,
                    scaleFrom?: ShapeScaleFrom
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: scaleFactor
          description: 現在の幅と変更後の幅の比率、または元の幅と変更後の幅の比率を指定します。
          type:
            - number
        - id: scaleType
          description: 図形を元のサイズに対して拡大または縮小するかを指定します。 元のサイズスケーリングオプションは、イメージに対してのみ機能します。
          type:
            - 'excel!Excel.ShapeScaleType:enum'
        - id: scaleFrom
          description: 省略可能です。 図形を拡大縮小する場合、図形の位置を保持する部分を指定します。 省略すると、図形の左上隅の位置を保持します。
          type:
            - 'excel!Excel.ShapeScaleFrom:enum'
  - uid: 'excel!Excel.Shape#setZOrder:member(1)'
    summary: 指定された図形をコレクションの z オーダーで上または下に移動します。他の図形の手前または奥に移動します。
    name: setZOrder(position)
    fullName: setZOrder(position)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setZOrder(position: ShapeZOrder): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.getItem("Octagon")
              shape.setZOrder(Excel.ShapeZOrder.sendBackward);
              await context.sync();
          }
          ```
      parameters:
        - id: position
          description: 他の図形を基準にして z オーダーのスタック内の図形を移動する位置を指定します。 詳細については、「Excel のスナップショット注文」を参照してください。
          type:
            - 'excel!Excel.ShapeZOrder:enum'
  - uid: 'excel!Excel.Shape#textFrame:member'
    summary: この図形のテキスト フレーム オブジェクトを返します。 読み取り専用です。
    name: textFrame
    fullName: textFrame
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textFrame: TextFrame;'
      return:
        type:
          - 'excel!Excel.TextFrame:interface'
  - uid: 'excel!Excel.Shape#top:member'
    summary: 図形の上端からワークシートの上までのポイント単位の距離です。 入力として負の値を設定すると、無効な引数の例外がスローされます。
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Shape#type:member'
    summary: この図形の種類を返します。 詳細については、Excel.ShapeType をご覧ください。
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: ShapeType;'
      return:
        type:
          - 'excel!Excel.ShapeType:enum'
  - uid: 'excel!Excel.Shape#visible:member'
    summary: 図形を表示するかどうかを指定します。
    name: visible
    fullName: visible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visible: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Shape#width:member'
    summary: 図形の幅をポイント単位で指定します。 負の値を設定した場合、または入力に0を指定した場合、無効な引数の例外がスローされます。
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Shape#zOrderPosition:member'
    summary: 指定された図形の z オーダーでの位置を返します。0 はオーダー スタックの一番下を表します。
    name: zOrderPosition
    fullName: zOrderPosition
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly zOrderPosition: number;'
      return:
        type:
          - number
references:
  - uid: 'excel!Excel.Shape:interface'
    name: Shape
    fullName: Excel.Shape
  - uid: 'excel!Excel.Shape#copyTo~0:complex'
    name: Worksheet | string
    fullName: Excel.Worksheet | string
    spec.typeScript:
      - uid: 'excel!Excel.Worksheet:interface'
        name: Worksheet
        fullName: Excel.Worksheet
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ShapeFill:interface'
    name: ShapeFill
    fullName: Excel.ShapeFill
  - uid: 'excel!Excel.GeometricShape:interface'
    name: GeometricShape
    fullName: Excel.GeometricShape
  - uid: 'excel!Excel.GeometricShapeType:enum'
    name: GeometricShapeType
    fullName: Excel.GeometricShapeType
  - uid: 'excel!Excel.PictureFormat:enum'
    name: PictureFormat
    fullName: Excel.PictureFormat
  - uid: 'excel!Excel.ShapeGroup:interface'
    name: ShapeGroup
    fullName: Excel.ShapeGroup
  - uid: 'excel!Excel.Image:interface'
    name: Image
    fullName: Excel.Image
  - uid: 'excel!Excel.Line:interface'
    name: Line
    fullName: Excel.Line
  - uid: 'excel!Excel.ShapeLineFormat:interface'
    name: ShapeLineFormat
    fullName: Excel.ShapeLineFormat
  - uid: 'excel!Excel.Placement:enum'
    name: Placement
    fullName: Excel.Placement
  - uid: 'excel!Excel.ShapeScaleType:enum'
    name: ShapeScaleType
    fullName: Excel.ShapeScaleType
  - uid: 'excel!Excel.ShapeScaleFrom:enum'
    name: ShapeScaleFrom
    fullName: Excel.ShapeScaleFrom
  - uid: 'excel!Excel.ShapeZOrder:enum'
    name: ShapeZOrder
    fullName: Excel.ShapeZOrder
  - uid: 'excel!Excel.TextFrame:interface'
    name: TextFrame
    fullName: Excel.TextFrame
  - uid: 'excel!Excel.ShapeType:enum'
    name: ShapeType
    fullName: Excel.ShapeType