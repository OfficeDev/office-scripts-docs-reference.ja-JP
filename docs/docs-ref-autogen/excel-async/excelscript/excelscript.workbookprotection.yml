### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.WorkbookProtection:interface'
    summary: ブックオブジェクトの保護を表します。
    name: Excel.WorkbookProtection
    fullName: Excel.WorkbookProtection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.WorkbookProtection#load:member(1)'
      - 'excel!Excel.WorkbookProtection#protect:member(1)'
      - 'excel!Excel.WorkbookProtection#protected:member'
      - 'excel!Excel.WorkbookProtection#unprotect:member(1)'
  - uid: 'excel!Excel.WorkbookProtection#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.WorkbookProtection#protect:member(1)'
    summary: ブックを保護します。 ブックが保護されている場合は失敗します。
    name: protect(password)
    fullName: protect(password)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protect(password?: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.load("protection/protected");

              await context.sync();

              if (!workbook.protection.protected) {
                  workbook.protection.protect();
              }
          }
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.load("protection/protected");

              await context.sync();

              if (!workbook.protection.protected) {
                  workbook.protection.protect(password);
              }
          }
          ```
      parameters:
        - id: password
          description: ブックの保護パスワード。
          type:
            - string
  - uid: 'excel!Excel.WorkbookProtection#protected:member'
    summary: ブックが保護されているかどうかを指定します。
    name: protected
    fullName: protected
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protected: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.WorkbookProtection#unprotect:member(1)'
    summary: ブックの保護を解除します。
    name: unprotect(password)
    fullName: unprotect(password)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unprotect(password?: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.protection.unprotect();
          }
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.protection.unprotect(password);
          }
          ```
      parameters:
        - id: password
          description: ブックの保護パスワード。
          type:
            - string