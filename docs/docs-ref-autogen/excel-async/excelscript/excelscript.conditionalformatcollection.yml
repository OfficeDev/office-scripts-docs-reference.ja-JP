### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormatCollection:interface'
    summary: 指定範囲と重複しているすべての条件付き書式のコレクションを表します。
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormatCollection#add:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(1)'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    summary: 新しい条件付き書式をコレクションの先頭/最上位の優先度に追加します。
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              let criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          }
          ```
      parameters:
        - id: type
          description: 追加する条件付き書式の種類を指定します。 詳細については、「ConditionalFormatType」を参照してください。
          type:
            - 'excel!Excel.ConditionalFormatType:enum'
  - uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    summary: 現在指定している範囲でアクティブなすべての条件付き書式をクリアする。
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    summary: ブック内の条件付き書式の数を返します。
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    summary: 指定された ID に対応する条件付き書式を返します。
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: 条件付き書式の id を指定します。
          type:
            - string
  - uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    summary: 指定されたインデックスに条件付き書式を返します。
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: index
          description: 取得する条件付き書式のインデックスを指定します。
          type:
            - number
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: Excel.ConditionalFormat
  - uid: 'excel!Excel.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: Excel.ConditionalFormatType