### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataPivotHierarchy:class'
    summary: Excel の DataPivotHierarchy を表します。
    name: Excel.DataPivotHierarchy
    fullName: Excel.DataPivotHierarchy
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.DataPivotHierarchy#context:member'
      - 'excel!Excel.DataPivotHierarchy#field:member'
      - 'excel!Excel.DataPivotHierarchy#id:member'
      - 'excel!Excel.DataPivotHierarchy#load:member(1)'
      - 'excel!Excel.DataPivotHierarchy#load:member(2)'
      - 'excel!Excel.DataPivotHierarchy#name:member'
      - 'excel!Excel.DataPivotHierarchy#numberFormat:member'
      - 'excel!Excel.DataPivotHierarchy#position:member'
      - 'excel!Excel.DataPivotHierarchy#set:member(1)'
      - 'excel!Excel.DataPivotHierarchy#setToDefault:member(1)'
      - 'excel!Excel.DataPivotHierarchy#showAs:member'
      - 'excel!Excel.DataPivotHierarchy#summarizeBy:member'
  - uid: 'excel!Excel.DataPivotHierarchy#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.DataPivotHierarchy#field:member'
    summary: DataPivotHierarchy に関連付けられているピボット フィールドを返します。
    name: field
    fullName: field
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly field: Excel.PivotField;'
      return:
        type:
          - 'excel!Excel.PivotField:class'
  - uid: 'excel!Excel.DataPivotHierarchy#id:member'
    summary: DataPivotHierarchy の ID。
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.DataPivotHierarchy#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataPivotHierarchy;'
      return:
        type:
          - 'excel!Excel.DataPivotHierarchy:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.DataPivotHierarchy#load:member(2)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.DataPivotHierarchy;
      return:
        type:
          - 'excel!Excel.DataPivotHierarchy:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`は、読み込むプロパティを指定するコンマで区切られた文字列で`propertyNamesAndPaths.expand` 、読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.DataPivotHierarchy#name:member'
    summary: DataPivotHierarchy の名前。
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let dataHierarchies = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales").dataHierarchies
              dataHierarchies.load("no-properties-needed");
              await context.sync();

              dataHierarchies.items[0].name = "Farm Sales";
              dataHierarchies.items[1].name = "Wholesale";
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataPivotHierarchy#numberFormat:member'
    summary: DataPivotHierarchy の数値形式。
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.DataPivotHierarchy#position:member'
    summary: DataPivotHierarchy の位置。
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.DataPivotHierarchy#set:member(1)'
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataPivotHierarchy): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.DataPivotHierarchy:class'
  - uid: 'excel!Excel.DataPivotHierarchy#setToDefault:member(1)'
    summary: DataPivotHierarchy を既定値にリセットします。
    name: setToDefault()
    fullName: setToDefault()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setToDefault(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.DataPivotHierarchy#showAs:member'
    summary: データを特定の集計計算として表示するかどうかどうかを指定します。
    name: showAs
    fullName: showAs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showAs: Excel.ShowAsRule;'
      return:
        type:
          - 'excel!Excel.ShowAsRule:interface'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              let farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
              let wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

              farmDataHierarchy.load("showAs");
              wholesaleDataHierarchy.load("showAs");
              await context.sync();

              // show the crates of each fruit type sold at the farm as a percentage of the column's total
              let farmShowAs = farmDataHierarchy.showAs;
              farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
              farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
              farmDataHierarchy.showAs = farmShowAs;

              let wholesaleShowAs = wholesaleDataHierarchy.showAs;
              wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
              wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
              wholesaleDataHierarchy.showAs = wholesaleShowAs;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataPivotHierarchy#summarizeBy:member'
    summary: DataPivotHierarchy のすべての項目を表示するかどうかを指定します。
    name: summarizeBy
    fullName: summarizeBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'summarizeBy: Excel.AggregationFunction | "Unknown" | "Automatic" | "Sum" | "Count" | "Average" | "Max" | "Min" | "Product" | "CountNumbers" | "StandardDeviation" | "StandardDeviationP" | "Variance" | "VarianceP";'
      return:
        type:
          - 'excel!Excel.DataPivotHierarchy#summarizeBy~0:complex'
references:
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.PivotField:class'
    name: PivotField
    fullName: Excel.PivotField
  - uid: 'excel!Excel.DataPivotHierarchy:class'
    name: DataPivotHierarchy
    fullName: Excel.DataPivotHierarchy
  - uid: 'excel!Excel.ShowAsRule:interface'
    name: ShowAsRule
    fullName: Excel.ShowAsRule
  - uid: 'excel!Excel.DataPivotHierarchy#summarizeBy~0:complex'
    name: Excel.AggregationFunction | "Unknown" | "Automatic" | "Sum" | "Count" | "Average" | "Max" | "Min" | "Product" | "CountNumbers" | "StandardDeviation" | "StandardDeviationP" | "Variance" | "VarianceP"
    fullName: Excel.AggregationFunction | "Unknown" | "Automatic" | "Sum" | "Count" | "Average" | "Max" | "Min" | "Product" | "CountNumbers" | "StandardDeviation" | "StandardDeviationP" | "Variance" | "VarianceP"
    spec.typeScript:
      - uid: 'excel!Excel.AggregationFunction:enum'
        name: Excel.AggregationFunction
        fullName: Excel.AggregationFunction
      - name: ' | "Unknown" | "Automatic" | "Sum" | "Count" | "Average" | "Max" | "Min" | "Product" | "CountNumbers" | "StandardDeviation" | "StandardDeviationP" | "Variance" | "VarianceP"'
        fullName: ' | "Unknown" | "Automatic" | "Sum" | "Count" | "Average" | "Max" | "Min" | "Product" | "CountNumbers" | "StandardDeviation" | "StandardDeviationP" | "Variance" | "VarianceP"'