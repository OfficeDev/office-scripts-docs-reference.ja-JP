### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Comment:class'
    summary: ブック内のコメントを表します。
    name: Excel.Comment
    fullName: Excel.Comment
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.Comment#authorEmail:member'
      - 'excel!Excel.Comment#authorName:member'
      - 'excel!Excel.Comment#content:member'
      - 'excel!Excel.Comment#context:member'
      - 'excel!Excel.Comment#creationDate:member'
      - 'excel!Excel.Comment#delete:member(1)'
      - 'excel!Excel.Comment#getLocation:member(1)'
      - 'excel!Excel.Comment#id:member'
      - 'excel!Excel.Comment#load:member(1)'
      - 'excel!Excel.Comment#load:member(2)'
      - 'excel!Excel.Comment#mentions:member'
      - 'excel!Excel.Comment#replies:member'
      - 'excel!Excel.Comment#richContent:member'
      - 'excel!Excel.Comment#set:member(1)'
      - 'excel!Excel.Comment#updateMentions:member(1)'
  - uid: 'excel!Excel.Comment#authorEmail:member'
    summary: コメント作成者のメール アドレスを取得します。
    name: authorEmail
    fullName: authorEmail
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly authorEmail: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Comment#authorName:member'
    summary: コメント作成者の名前を取得します。
    name: authorName
    fullName: authorName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly authorName: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Comment#content:member'
    summary: コメントの内容を取得または設定します。 文字列はテキスト形式です。
    name: content
    fullName: content
    langs:
      - typeScript
    type: property
    syntax:
      content: 'content: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Comments");
              let comment = sheet.comments.getItemAt(0);
              comment.content = "PLEASE add headers here.";
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Comment#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Comment#creationDate:member'
    summary: コメントの作成日時を取得します。 コメントがメモから変換されている場合、コメントには作成日時がないため、null が返されます。
    name: creationDate
    fullName: creationDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly creationDate: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'excel!Excel.Comment#delete:member(1)'
    summary: コメントと、接続されているすべての返信を削除します。
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              context.workbook.comments.getItemByCell("Comments!A2").delete();
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Comment#getLocation:member(1)'
    summary: このコメントが配置されているセルを取得します。
    name: getLocation()
    fullName: getLocation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLocation(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Comment#id:member'
    summary: コメント ID を表します。 読み取り専用です。
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Comment#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Comment;'
      return:
        type:
          - 'excel!Excel.Comment:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Comment#load:member(2)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Comment;
      return:
        type:
          - 'excel!Excel.Comment:class'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let comment = context.workbook.comments.getItemByCell("Comments!A2");
              comment.load(["authorEmail", "authorName", "creationDate"]);
              await context.sync();

              console.log(`${comment.creationDate.toDateString()}: ${comment.authorName} (${comment.authorEmail})`);
              await context.sync();
          }
          ```
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`は、読み込むプロパティを指定するコンマで区切られた文字列で`propertyNamesAndPaths.expand` 、読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Comment#mentions:member'
    summary: コメントに記載されているエンティティ (人物など) を取得します。
    name: mentions
    fullName: mentions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly mentions: Excel.CommentMention[];'
      return:
        type:
          - 'excel!Excel.Comment#mentions~0:complex'
  - uid: 'excel!Excel.Comment#replies:member'
    summary: コメントに関連付けられている返信オブジェクトのコレクションを表します。 読み取り専用です。
    name: replies
    fullName: replies
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly replies: Excel.CommentReplyCollection;'
      return:
        type:
          - 'excel!Excel.CommentReplyCollection:class'
  - uid: 'excel!Excel.Comment#richContent:member'
    summary: リッチコメントの内容 (コメントに含まれるメンションなど) を取得します。 この文字列は、エンドユーザーに表示されることを意図したものではありません。 アドインでは、リッチコメントコンテンツを解析するためにのみ使用する必要があります。
    name: richContent
    fullName: richContent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly richContent: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Comment#set:member(1)'
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Comment): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Comment:class'
  - uid: 'excel!Excel.Comment#updateMentions:member(1)'
    summary: 特別に書式設定された文字列とメンションの一覧を使用して、コメントの内容を更新します。
    name: updateMentions(contentWithMentions)
    fullName: updateMentions(contentWithMentions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'updateMentions(contentWithMentions: Excel.CommentRichContent): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: contentWithMentions
          description: コメントの内容を示します。 これには、特別に書式設定された文字列と、Excel で表示されるときに文字列に解析されるメンションの一覧が含まれています。
          type:
            - 'excel!Excel.CommentRichContent:interface'
references:
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: '!Date:interface'
    name: Date
  - uid: 'excel!Excel.Range:class'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.Comment:class'
    name: Comment
    fullName: Excel.Comment
  - uid: 'excel!Excel.Comment#mentions~0:complex'
    name: 'Excel.CommentMention[]'
    fullName: 'Excel.CommentMention[]'
    spec.typeScript:
      - uid: 'excel!Excel.CommentMention:interface'
        name: Excel.CommentMention
        fullName: Excel.CommentMention
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CommentReplyCollection:class'
    name: CommentReplyCollection
    fullName: Excel.CommentReplyCollection
  - uid: 'excel!Excel.CommentRichContent:interface'
    name: CommentRichContent
    fullName: Excel.CommentRichContent