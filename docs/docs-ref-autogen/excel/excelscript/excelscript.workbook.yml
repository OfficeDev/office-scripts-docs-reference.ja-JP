### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.Workbook:interface'
    summary: 'Workbook は、ワークシート、テーブル、範囲などの関連するブックオブジェクトを含む最上位レベルのオブジェクトです。ブックオブジェクトモデルの詳細については、「 [Excel JAVASCRIPT API を使用してブックを操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks)する」を参照してください。<!-- -->.'
    name: ExcelScript.Workbook
    fullName: ExcelScript.Workbook
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.Workbook#addBinding:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addBindingFromNamedItem:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addBindingFromSelection:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addComment:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addCustomXmlPart:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addNamedItem:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addPivotTable:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addPivotTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addSlicer:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addSlicerStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addTable:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addTimelineStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#addWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getActiveCell:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getActiveChart:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getActiveSlicer:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getActiveWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getApplication:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getAutoSave:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getBinding:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getBindings:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getCalculationEngineVersion:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getChartDataPointTrack:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getComment:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getCommentByCell:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getCommentByReplyId:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getComments:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getCustomXmlPart:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getCustomXmlParts:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getDefaultTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getFirstWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getIsDirty:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getLastWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getName:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getNamedItem:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getNames:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPivotTable:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPivotTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPivotTableStyles:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getPreviouslySaved:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getProperties:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getProtection:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getReadOnly:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getSelectedRange:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getSelectedRanges:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getSlicer:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getSlicers:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getSlicerStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getSlicerStyles:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getTable:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getTables:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getTableStyles:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getTimelineStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getTimelineStyles:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#getWorksheets:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#refreshAllDataConnections:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#refreshAllPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setChartDataPointTrack:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setDefaultTableStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setIsDirty:member(1)'
      - 'ExcelScript!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)'
  - uid: 'ExcelScript!ExcelScript.Workbook#addBinding:member(1)'
    summary: 特定の範囲に新しいバインドを追加します。
    name: 'addBinding(range, bindingType, id)'
    fullName: 'addBinding(range, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addBinding(
                    range: Range | string,
                    bindingType: BindingType,
                    id: string
                ): Binding;
      return:
        type:
          - 'ExcelScript!ExcelScript.Binding:interface'
        description: ''
      parameters:
        - id: range
          description: バインドをバインドする範囲です。Excel Range オブジェクト、または文字列である場合があります。文字列の場合は、シート名を含む完全なアドレスが含まれている必要があります
          type:
            - 'ExcelScript!ExcelScript.Workbook#addBinding~0:complex'
        - id: bindingType
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.BindingType:enum'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addBindingFromNamedItem:member(1)'
    summary: ブック内の名前付きアイテムに基づいて新しいバインドを追加します。 名前付きアイテムが複数の領域を参照している場合は、"InvalidReference" エラーが返されます。
    name: 'addBindingFromNamedItem(name, bindingType, id)'
    fullName: 'addBindingFromNamedItem(name, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addBindingFromNamedItem(
                    name: string,
                    bindingType: BindingType,
                    id: string
                ): Binding;
      return:
        type:
          - 'ExcelScript!ExcelScript.Binding:interface'
        description: ''
      parameters:
        - id: name
          description: バインドの作成元の名前です。
          type:
            - string
        - id: bindingType
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.BindingType:enum'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addBindingFromSelection:member(1)'
    summary: 現在の選択範囲に基づいて新しいバインドを追加します。 複数の領域が選択されている場合は、"InvalidReference" エラーが返されます。
    name: 'addBindingFromSelection(bindingType, id)'
    fullName: 'addBindingFromSelection(bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addBindingFromSelection(bindingType: BindingType, id: string): Binding;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Binding:interface'
        description: ''
      parameters:
        - id: bindingType
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.BindingType:enum'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addComment:member(1)'
    summary: 指定したセルで、指定した内容の新しいコメントを作成します。 `InvalidArgument`指定した範囲が1つのセルより大きい場合は、エラーがスローされます。
    name: 'addComment(cellAddress, content, contentType)'
    fullName: 'addComment(cellAddress, content, contentType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addComment(
                    cellAddress: Range | string,
                    content: CommentRichContent | string,
                    contentType?: ContentType
                ): Comment;
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: コメントを追加するセルを指定します。 Range オブジェクトまたは文字列を指定できます。 文字列型 (string) の場合は、シート名を含む完全な住所が含まれている必要があります。 `InvalidArgument`指定した範囲が1つのセルより大きい場合は、エラーがスローされます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addComment~0:complex'
        - id: content
          description: コメントの内容を示します。 文字列または CommentRichContent オブジェクトのいずれかを指定できます。 文字列はテキスト形式に対して使用されます。 CommentRichContent オブジェクトでは、メンションなど、他のコメント機能を使用できます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addComment~1:complex'
        - id: contentType
          description: 省略可能です。 コメント内に含まれるコンテンツの種類。 既定値は enum です。`ContentType.Plain`<!-- -->.
          type:
            - 'ExcelScript!ExcelScript.ContentType:enum'
  - uid: 'ExcelScript!ExcelScript.Workbook#addCustomXmlPart:member(1)'
    summary: ブックに新しいカスタム XML パーツを追加します。
    name: addCustomXmlPart(xml)
    fullName: addCustomXmlPart(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addCustomXmlPart(xml: string): CustomXmlPart;'
      return:
        type:
          - 'ExcelScript!ExcelScript.CustomXmlPart:interface'
        description: ''
      parameters:
        - id: xml
          description: XML コンテンツ。 有効な XML フラグメントである必要があります。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addNamedItem:member(1)'
    summary: 指定のスコープのコレクションに新しい名前を追加します。
    name: 'addNamedItem(name, reference, comment)'
    fullName: 'addNamedItem(name, reference, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItem(
                    name: string,
                    reference: Range | string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'ExcelScript!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: 名前付きの項目の名前。
          type:
            - string
        - id: reference
          description: 名前が参照する数式または範囲。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addNamedItem~0:complex'
        - id: comment
          description: 省略可能です。 名前付きアイテムに関連付けられているコメント。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)'
    summary: ユーザーのロケールを数式に使用して、指定のスコープのコレクションに新しい名前を追加します。
    name: 'addNamedItemFormulaLocal(name, formula, comment)'
    fullName: 'addNamedItemFormulaLocal(name, formula, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItemFormulaLocal(
                    name: string,
                    formula: string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'ExcelScript!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: 名前付きアイテムの "名前"。
          type:
            - string
        - id: formula
          description: 名前が参照するユーザーのロケールの数式。
          type:
            - string
        - id: comment
          description: 省略可能です。 名前付きアイテムに関連付けられているコメント。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addPivotTable:member(1)'
    summary: 指定したソースデータに基づいてピボットテーブルを追加し、貼り付け先のセル範囲の左上のセルに挿入します。
    name: 'addPivotTable(name, source, destination)'
    fullName: 'addPivotTable(name, source, destination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addPivotTable(
                    name: string,
                    source: Range | string | Table,
                    destination: Range | string
                ): PivotTable;
      return:
        type:
          - 'ExcelScript!ExcelScript.PivotTable:interface'
        description: ''
      parameters:
        - id: name
          description: 新しいピボットテーブルの名前を指定します。
          type:
            - string
        - id: source
          description: 新しいピボットテーブルのソースデータは、範囲 (またはワークシート名を含む文字列のアドレス) またはテーブルのいずれかです。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addPivotTable~0:complex'
        - id: destination
          description: ピボットテーブル レポートの配置先範囲 (結果のレポートを配置するワークシートの範囲) の左上端のセルを指定します。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addPivotTable~1:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#addPivotTableStyle:member(1)'
    summary: 指定された名前で空の PivotTableStyle を作成します。
    name: 'addPivotTableStyle(name, makeUniqueName)'
    fullName: 'addPivotTableStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addPivotTableStyle(
                    name: string,
                    makeUniqueName?: boolean
                ): PivotTableStyle;
      return:
        type:
          - 'ExcelScript!ExcelScript.PivotTableStyle:interface'
        description: ''
      parameters:
        - id: name
          description: 新しい PivotTableStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
          type:
            - string
        - id: makeUniqueName
          description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#addPredefinedCellStyle:member(1)'
    summary: コレクションに新しいスタイルを追加します。
    name: addPredefinedCellStyle(name)
    fullName: addPredefinedCellStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addPredefinedCellStyle(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: 追加するスタイルの名前を指定します。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#addSlicer:member(1)'
    summary: ブックに新しいスライサーを追加します。
    name: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    fullName: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addSlicer(
                    slicerSource: string | PivotTable | Table,
                    sourceField: string | PivotField | number | TableColumn,
                    slicerDestination?: string | Worksheet
                ): Slicer;
      return:
        type:
          - 'ExcelScript!ExcelScript.Slicer:interface'
        description: ''
      parameters:
        - id: slicerSource
          description: 新しいスライサーの基となるデータソース。 PivotTable オブジェクト、Table オブジェクト、または文字列を指定できます。 PivotTable オブジェクトが渡されると、データソースは PivotTable オブジェクトのソースになります。 Table オブジェクトが渡されると、データソースは Table オブジェクトになります。 文字列が渡されると、PivotTable/Table の名前または id として解釈されます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addSlicer~0:complex'
        - id: sourceField
          description: フィルター処理の対象となるデータソース内のフィールド。 PivotField オブジェクト、TableColumn オブジェクト、PivotField の id、または TableColumn の id または名前を指定できます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addSlicer~1:complex'
        - id: slicerDestination
          description: 省略可能です。 新しいスライサーを作成するワークシートを指定します。 ワークシートオブジェクト、またはワークシートの名前/id を指定できます。 スライサーコレクションをワークシートから取得する場合は、このパラメーターを省略できます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addSlicer~2:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#addSlicerStyle:member(1)'
    summary: 指定された名前で空の SlicerStyle を作成します。
    name: 'addSlicerStyle(name, makeUniqueName)'
    fullName: 'addSlicerStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSlicerStyle(name: string, makeUniqueName?: boolean): SlicerStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.SlicerStyle:interface'
        description: ''
      parameters:
        - id: name
          description: 新しい SlicerStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
          type:
            - string
        - id: makeUniqueName
          description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#addTable:member(1)'
    summary: 新しいテーブルを作成します。範囲オブジェクトまたはソース アドレスにより、テーブルが追加されるワークシートが判断されます。テーブルが追加できない場合 (たとえば、アドレスが無効な場合や、テーブルが別のテーブルと重複している場合) は、エラーがスローされます。
    name: 'addTable(address, hasHeaders)'
    fullName: 'addTable(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Table:interface'
        description: ''
      parameters:
        - id: address
          description: Range オブジェクト、あるいはデータ ソースを表す範囲の文字列アドレスまたは名前。 アドレスにシート名が含まれていない場合は、現在作業中のシートが使用されます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#addTable~0:complex'
        - id: hasHeaders
          description: インポートされたデータに列ラベルがあるかどうかを示すブール値。ソースにヘッダーが含まれていない場合 (このプロパティが false に設定されている場合)、Excel はデータを下方向に 1 行シフトして、自動的にヘッダーを生成します。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#addTableStyle:member(1)'
    summary: 指定された名前で空の TableStyle を作成します。
    name: 'addTableStyle(name, makeUniqueName)'
    fullName: 'addTableStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTableStyle(name: string, makeUniqueName?: boolean): TableStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.TableStyle:interface'
        description: ''
      parameters:
        - id: name
          description: 新しい TableStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
          type:
            - string
        - id: makeUniqueName
          description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#addTimelineStyle:member(1)'
    summary: 指定された名前で空の TimelineStyle を作成します。
    name: 'addTimelineStyle(name, makeUniqueName)'
    fullName: 'addTimelineStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTimelineStyle(name: string, makeUniqueName?: boolean): TimelineStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.TimelineStyle:interface'
        description: ''
      parameters:
        - id: name
          description: 新しい TimelineStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
          type:
            - string
        - id: makeUniqueName
          description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#addWorksheet:member(1)'
    summary: 新しいワークシートをブックに追加します。ワークシートは、既存のワークシートの末尾に追加されます。新しく追加したワークシートをアクティブにする場合は、そのワークシートに対して ".activate() を呼び出します。
    name: addWorksheet(name)
    fullName: addWorksheet(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addWorksheet(name?: string): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: name
          description: 省略可能。追加するワークシートの名前。指定する場合、名前は一意である必要があります。指定されていない場合は、Excel が新しいワークシートの名前を決定します。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getActiveCell:member(1)'
    summary: ブックで現在アクティブなセルを取得します。
    name: getActiveCell()
    fullName: getActiveCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveCell(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
           * This script logs the value of the current active cell. 
           * If multiple cells are selected, the top-leftmost cell will be logged.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current active cell in the workbook.
            let cell = workbook.getActiveCell();
            console.log(`The current cell's value is ${cell.getValue()}`);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Workbook#getActiveChart:member(1)'
    summary: ブックで現在アクティブになっているグラフを取得します。 アクティブなグラフがない場合は、null オブジェクトが返されます。
    name: getActiveChart()
    fullName: getActiveChart()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveChart(): Chart;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Chart:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getActiveSlicer:member(1)'
    summary: ブックで現在アクティブになっているスライサーを取得します。 アクティブになっているスライサーがない場合、null オブジェクトが返されます。
    name: getActiveSlicer()
    fullName: getActiveSlicer()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSlicer(): Slicer;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Slicer:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getActiveWorksheet:member(1)'
    summary: ブックの、現在作業中のワークシートを取得します。
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getApplication:member(1)'
    summary: このブックを含む Excel アプリケーションインスタンスを表します。
    name: getApplication()
    fullName: getApplication()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getApplication(): Application;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Application:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getAutoSave:member(1)'
    summary: ブックが自動保存モードであるかどうかを指定します。
    name: getAutoSave()
    fullName: getAutoSave()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAutoSave(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getBinding:member(1)'
    summary: ID によってバインド オブジェクトを取得します。 バインディング オブジェクトが存在しない場合は null オブジェクトを返します。
    name: getBinding(id)
    fullName: getBinding(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBinding(id: string): Binding | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getBinding~0:complex'
        description: ''
      parameters:
        - id: id
          description: 取得するバインド オブジェクトの ID。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getBindings:member(1)'
    summary: ブックの一部であるバインドのコレクションを表します。
    name: getBindings()
    fullName: getBindings()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBindings(): Binding[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getBindings~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getCalculationEngineVersion:member(1)'
    summary: Excel 計算エンジンのバージョンとして数字を返します。
    name: getCalculationEngineVersion()
    fullName: getCalculationEngineVersion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCalculationEngineVersion(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getChartDataPointTrack:member(1)'
    summary: 関連付けられている実際のデータ ポイントをブックの全グラフが追跡している場合、true となります。 False の場合、グラフはデータポイントのインデックスを追跡します。
    name: getChartDataPointTrack()
    fullName: getChartDataPointTrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getChartDataPointTrack(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getComment:member(1)'
    summary: ID に基づいてコレクションからコメントを取得します。
    name: getComment(commentId)
    fullName: getComment(commentId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComment(commentId: string): Comment;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: commentId
          description: コメントの識別子。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getCommentByCell:member(1)'
    summary: 指定したセルからコメントを取得します。
    name: getCommentByCell(cellAddress)
    fullName: getCommentByCell(cellAddress)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByCell(cellAddress: Range | string): Comment;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: コメントがあるセルを指定します。 Range オブジェクトまたは文字列を指定できます。 文字列型 (string) の場合は、シート名を含む完全な住所が含まれている必要があります。 `InvalidArgument`指定した範囲が1つのセルより大きい場合は、エラーがスローされます。
          type:
            - 'ExcelScript!ExcelScript.Workbook#getCommentByCell~0:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#getCommentByReplyId:member(1)'
    summary: 指定した返信が接続されているコメントを取得します。
    name: getCommentByReplyId(replyId)
    fullName: getCommentByReplyId(replyId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByReplyId(replyId: string): Comment;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: replyId
          description: コメント応答の識別子。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getComments:member(1)'
    summary: ブックに関連付けられているコメントの集まりを表します。
    name: getComments()
    fullName: getComments()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComments(): Comment[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getComments~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getCustomXmlPart:member(1)'
    summary: ID に基づいて、カスタム XML パーツを取得します。 CustomXmlPart が存在しない場合、返されるオブジェクトの isNull プロパティは true になります。
    name: getCustomXmlPart(id)
    fullName: getCustomXmlPart(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCustomXmlPart(id: string): CustomXmlPart | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getCustomXmlPart~0:complex'
        description: ''
      parameters:
        - id: id
          description: 取得するオブジェクトの ID を指定します。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace:member(1)'
    summary: 名前空間が指定した名前空間に一致する、カスタム XML パーツの新しい範囲のコレクションを取得します。
    name: getCustomXmlPartByNamespace(namespaceUri)
    fullName: getCustomXmlPartByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCustomXmlPartByNamespace(namespaceUri: string): CustomXmlPart[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace~0:complex'
        description: ''
      parameters:
        - id: namespaceUri
          description: 'これは完全修飾スキーマ URI である必要があります。たとえば、" http://schemas.contoso.com/review/1.0 " などです。'
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getCustomXmlParts:member(1)'
    summary: このブックに格納されているカスタム XML パーツのコレクションを表します。
    name: getCustomXmlParts()
    fullName: getCustomXmlParts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCustomXmlParts(): CustomXmlPart[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getCustomXmlParts~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)'
    summary: 親オブジェクトのスコープに対する既定の PivotTableStyle を取得します。
    name: getDefaultPivotTableStyle()
    fullName: getDefaultPivotTableStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultPivotTableStyle(): PivotTableStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.PivotTableStyle:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)'
    summary: 親オブジェクトのスコープに対する既定の SlicerStyle を取得します。
    name: getDefaultSlicerStyle()
    fullName: getDefaultSlicerStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultSlicerStyle(): SlicerStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.SlicerStyle:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getDefaultTableStyle:member(1)'
    summary: 親オブジェクトのスコープに対する既定の TableStyle を取得します。
    name: getDefaultTableStyle()
    fullName: getDefaultTableStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultTableStyle(): TableStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.TableStyle:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)'
    summary: 親オブジェクトのスコープに対する既定の TimelineStyle を取得します。
    name: getDefaultTimelineStyle()
    fullName: getDefaultTimelineStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultTimelineStyle(): TimelineStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.TimelineStyle:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getFirstWorksheet:member(1)'
    summary: コレクション内の最初のワークシートを取得します。
    name: getFirstWorksheet(visibleOnly)
    fullName: getFirstWorksheet(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirstWorksheet(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 省略可能です。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#getIsDirty:member(1)'
    summary: ブックが最後に保存されてから変更を行ったかどうかを指定します。 変更したブックを保存しない、または保存するかどうかを確認するダイアログボックスを非表示にして閉じる場合は、このプロパティを true に設定しておくことができます。
    name: getIsDirty()
    fullName: getIsDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsDirty(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getLastWorksheet:member(1)'
    summary: コレクション内の最後のワークシートを取得します。
    name: getLastWorksheet(visibleOnly)
    fullName: getLastWorksheet(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastWorksheet(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 省略可能です。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#getName:member(1)'
    summary: ブックの名前を取得します。
    name: getName()
    fullName: getName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getName(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getNamedItem:member(1)'
    summary: 名前を使用して、NamedItem オブジェクトを取得します。 nameditem オブジェクトが存在しない場合は null オブジェクトを返します。
    name: getNamedItem(name)
    fullName: getNamedItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNamedItem(name: string): NamedItem | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getNamedItem~0:complex'
        description: ''
      parameters:
        - id: name
          description: Nameditem 名。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getNames:member(1)'
    summary: ブック スコープの名前付き項目 (名前付き範囲と名前付き定数) のコレクションを表します。
    name: getNames()
    fullName: getNames()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNames(): NamedItem[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getNames~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTable:member(1)'
    summary: 名前を使用してピボットテーブルを取得します。 PivotTable が存在しない場合は null オブジェクトを返します。
    name: getPivotTable(name)
    fullName: getPivotTable(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTable(name: string): PivotTable | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getPivotTable~0:complex'
        description: ''
      parameters:
        - id: name
          description: 取得するピボットテーブルの名前。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTables:member(1)'
    summary: ブックに関連付けられているピボットテーブルのコレクションを表します。
    name: getPivotTables()
    fullName: getPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(): PivotTable[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getPivotTables~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTableStyle:member(1)'
    summary: 名前に基づいて PivotTableStyle を取得します。 PivotTableStyle が存在しない場合は、null オブジェクトを返します。
    name: getPivotTableStyle(name)
    fullName: getPivotTableStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTableStyle(name: string): PivotTableStyle | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getPivotTableStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: 取得する PivotTableStyle の名前。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTableStyles:member(1)'
    summary: ブックに関連付けられている PivotTableStyle のコレクションを表します。
    name: getPivotTableStyles()
    fullName: getPivotTableStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTableStyles(): PivotTableStyle[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getPivotTableStyles~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getPredefinedCellStyle:member(1)'
    summary: 名前に基づいてスタイルを取得します。
    name: getPredefinedCellStyle(name)
    fullName: getPredefinedCellStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(name: string): PredefinedCellStyle;'
      return:
        type:
          - 'ExcelScript!ExcelScript.PredefinedCellStyle:interface'
        description: ''
      parameters:
        - id: name
          description: 取得するスタイルの名前を指定します。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles:member(1)'
    summary: ブックに関連付けられているスタイルのコレクションを表します。
    name: getPredefinedCellStyles()
    fullName: getPredefinedCellStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyles(): PredefinedCellStyle[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getPreviouslySaved:member(1)'
    summary: ブックがローカルに、またはオンラインで保存されたことがあるかどうかを指定します。
    name: getPreviouslySaved()
    fullName: getPreviouslySaved()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviouslySaved(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getProperties:member(1)'
    summary: ブックのプロパティを取得します。
    name: getProperties()
    fullName: getProperties()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProperties(): DocumentProperties;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DocumentProperties:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getProtection:member(1)'
    summary: ブックの保護オブジェクトを返します。
    name: getProtection()
    fullName: getProtection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProtection(): WorkbookProtection;'
      return:
        type:
          - 'ExcelScript!ExcelScript.WorkbookProtection:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getReadOnly:member(1)'
    summary: true の場合、ブックが読み取り専用モードで開かれます。
    name: getReadOnly()
    fullName: getReadOnly()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getReadOnly(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getSelectedRange:member(1)'
    summary: ブックから現在選択されている1つのセル範囲を取得します。 複数の範囲が選択されている場合、このメソッドはエラーをスローします。
    name: getSelectedRange()
    fullName: getSelectedRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRange(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getSelectedRanges:member(1)'
    summary: ブックから現在選択されている 1 つまたは複数の範囲を取得します。 getSelectedRange() の場合と同様に、このメソッドは、選択されているすべての範囲を表す RangeAreas オブジェクトを返します。
    name: getSelectedRanges()
    fullName: getSelectedRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRanges(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicer:member(1)'
    summary: 名前または ID に基づいてスライサーを取得します。スライサーが存在しない場合は null オブジェクトを返します。
    name: getSlicer(key)
    fullName: getSlicer(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicer(key: string): Slicer | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getSlicer~0:complex'
        description: ''
      parameters:
        - id: key
          description: 取得するスライサーの名前または Id。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicers:member(1)'
    summary: ブックに関連付けられているスライサーの集まりを表します。
    name: getSlicers()
    fullName: getSlicers()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicers(): Slicer[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getSlicers~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicerStyle:member(1)'
    summary: 名前で SlicerStyle を取得します。 SlicerStyle が存在しない場合は、null オブジェクトを返します。
    name: getSlicerStyle(name)
    fullName: getSlicerStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicerStyle(name: string): SlicerStyle | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getSlicerStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: 取得する SlicerStyle の名前。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicerStyles:member(1)'
    summary: ブックに関連付けられている SlicerStyle のコレクションを表します。
    name: getSlicerStyles()
    fullName: getSlicerStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicerStyles(): SlicerStyle[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getSlicerStyles~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getTable:member(1)'
    summary: 名前または ID でテーブルを取得します。 テーブルが存在しない場合は null オブジェクトを返します。
    name: getTable(key)
    fullName: getTable(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(key: string): Table | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getTable~0:complex'
        description: ''
      parameters:
        - id: key
          description: 取得するテーブルの名前または ID。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getTables:member(1)'
    summary: ブックに関連付けられているテーブルのコレクションを表します。
    name: getTables()
    fullName: getTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getTables~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getTableStyle:member(1)'
    summary: 名前で TableStyle を取得します。 TableStyle が存在しない場合は、null オブジェクトを返します。
    name: getTableStyle(name)
    fullName: getTableStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTableStyle(name: string): TableStyle | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getTableStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: 取得する TableStyle の名前。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getTableStyles:member(1)'
    summary: ブックに関連付けられている TableStyle のコレクションを表します。
    name: getTableStyles()
    fullName: getTableStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTableStyles(): TableStyle[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getTableStyles~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getTimelineStyle:member(1)'
    summary: 名前で TimelineStyle を取得します。 TimelineStyle が存在しない場合は、null オブジェクトを返します。
    name: getTimelineStyle(name)
    fullName: getTimelineStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTimelineStyle(name: string): TimelineStyle | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getTimelineStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: 取得する TimelineStyle の名前。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getTimelineStyles:member(1)'
    summary: ブックに関連付けられている TimelineStyle のコレクションを表します。
    name: getTimelineStyles()
    fullName: getTimelineStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTimelineStyles(): TimelineStyle[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getTimelineStyles~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)'
    summary: ブックを表示桁数でのみ計算する場合、true となります。 このプロパティを false から true に切り替えた場合、データは完全に正確に失われます。
    name: getUsePrecisionAsDisplayed()
    fullName: getUsePrecisionAsDisplayed()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsePrecisionAsDisplayed(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#getWorksheet:member(1)'
    summary: 名前または ID を使用して、ワークシート オブジェクトを取得します。 ワークシートが存在しない場合は null オブジェクトを返します。
    name: getWorksheet(key)
    fullName: getWorksheet(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(key: string): Worksheet | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getWorksheet~0:complex'
        description: ''
      parameters:
        - id: key
          description: ワークシートの名前または ID。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Workbook#getWorksheets:member(1)'
    summary: ブックに関連付けられているワークシートのコレクションを表します。
    name: getWorksheets()
    fullName: getWorksheets()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheets(): Worksheet[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Workbook#getWorksheets~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#refreshAllDataConnections:member(1)'
    summary: すべてのデータ接続を更新します。
    name: refreshAllDataConnections()
    fullName: refreshAllDataConnections()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAllDataConnections(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#refreshAllPivotTables:member(1)'
    summary: コレクション内のすべてのピボットテーブルを更新します。
    name: refreshAllPivotTables()
    fullName: refreshAllPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAllPivotTables(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Workbook#setChartDataPointTrack:member(1)'
    summary: 関連付けられている実際のデータ ポイントをブックの全グラフが追跡している場合、true となります。 False の場合、グラフはデータポイントのインデックスを追跡します。
    name: setChartDataPointTrack(chartDataPointTrack)
    fullName: setChartDataPointTrack(chartDataPointTrack)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setChartDataPointTrack(chartDataPointTrack: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: chartDataPointTrack
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)'
    summary: 親オブジェクトのスコープで使用する既定の PivotTableStyle を設定します。
    name: setDefaultPivotTableStyle(newDefaultStyle)
    fullName: setDefaultPivotTableStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        setDefaultPivotTableStyle(
                    newDefaultStyle: PivotTableStyle | string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: 新しい既定値にする必要がある、PivotTableStyle オブジェクトの PivotTableStyle オブジェクトまたは名前。
          type:
            - 'ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle~0:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)'
    summary: 親オブジェクトのスコープで使用する既定の SlicerStyle を設定します。
    name: setDefaultSlicerStyle(newDefaultStyle)
    fullName: setDefaultSlicerStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefaultSlicerStyle(newDefaultStyle: SlicerStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: 新しい既定値にする必要がある、SlicerStyle オブジェクトの SlicerStyle オブジェクトまたは名前。
          type:
            - 'ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle~0:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultTableStyle:member(1)'
    summary: 親オブジェクトのスコープで使用する既定の TableStyle を設定します。
    name: setDefaultTableStyle(newDefaultStyle)
    fullName: setDefaultTableStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefaultTableStyle(newDefaultStyle: TableStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: 新しい既定値にする必要がある、TableStyle オブジェクトの TableStyle オブジェクトまたは名前。
          type:
            - 'ExcelScript!ExcelScript.Workbook#setDefaultTableStyle~0:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)'
    summary: 親オブジェクトのスコープで使用する既定の TimelineStyle を設定します。
    name: setDefaultTimelineStyle(newDefaultStyle)
    fullName: setDefaultTimelineStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefaultTimelineStyle(newDefaultStyle: TimelineStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: 新しい既定値にする必要がある、TimelineStyle オブジェクトの TimelineStyle オブジェクトまたは名前。
          type:
            - 'ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle~0:complex'
  - uid: 'ExcelScript!ExcelScript.Workbook#setIsDirty:member(1)'
    summary: ブックが最後に保存されてから変更を行ったかどうかを指定します。 変更したブックを保存しない、または保存するかどうかを確認するダイアログボックスを非表示にして閉じる場合は、このプロパティを true に設定しておくことができます。
    name: setIsDirty(isDirty)
    fullName: setIsDirty(isDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setIsDirty(isDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isDirty
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)'
    summary: ブックを表示桁数でのみ計算する場合、true となります。 このプロパティを false から true に切り替えた場合、データは完全に正確に失われます。
    name: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
    fullName: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setUsePrecisionAsDisplayed(usePrecisionAsDisplayed: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: usePrecisionAsDisplayed
          description: ''
          type:
            - boolean
references:
  - uid: 'ExcelScript!ExcelScript.Binding:interface'
    name: Binding
    fullName: ExcelScript.Binding
  - uid: 'ExcelScript!ExcelScript.Workbook#addBinding~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.BindingType:enum'
    name: BindingType
    fullName: ExcelScript.BindingType
  - uid: 'ExcelScript!ExcelScript.Comment:interface'
    name: Comment
    fullName: ExcelScript.Comment
  - uid: 'ExcelScript!ExcelScript.Workbook#addComment~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Workbook#addComment~1:complex'
    name: CommentRichContent | string
    fullName: ExcelScript.CommentRichContent | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.CommentRichContent:interface'
        name: CommentRichContent
        fullName: ExcelScript.CommentRichContent
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.ContentType:enum'
    name: ContentType
    fullName: ExcelScript.ContentType
  - uid: 'ExcelScript!ExcelScript.CustomXmlPart:interface'
    name: CustomXmlPart
    fullName: ExcelScript.CustomXmlPart
  - uid: 'ExcelScript!ExcelScript.NamedItem:interface'
    name: NamedItem
    fullName: ExcelScript.NamedItem
  - uid: 'ExcelScript!ExcelScript.Workbook#addNamedItem~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
    name: PivotTable
    fullName: ExcelScript.PivotTable
  - uid: 'ExcelScript!ExcelScript.Workbook#addPivotTable~0:complex'
    name: Range | string | Table
    fullName: ExcelScript.Range | string | ExcelScript.Table
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string | '
        fullName: ' | string | '
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'ExcelScript!ExcelScript.Workbook#addPivotTable~1:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'ExcelScript!ExcelScript.PivotTableStyle:interface'
    name: PivotTableStyle
    fullName: ExcelScript.PivotTableStyle
  - uid: 'ExcelScript!ExcelScript.Slicer:interface'
    name: Slicer
    fullName: ExcelScript.Slicer
  - uid: 'ExcelScript!ExcelScript.Workbook#addSlicer~0:complex'
    name: string | PivotTable | Table
    fullName: string | ExcelScript.PivotTable | ExcelScript.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'ExcelScript!ExcelScript.Workbook#addSlicer~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | ExcelScript.PivotField | number | ExcelScript.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'ExcelScript!ExcelScript.PivotField:interface'
        name: PivotField
        fullName: ExcelScript.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'ExcelScript!ExcelScript.TableColumn:interface'
        name: TableColumn
        fullName: ExcelScript.TableColumn
  - uid: 'ExcelScript!ExcelScript.Workbook#addSlicer~2:complex'
    name: string | Worksheet
    fullName: string | ExcelScript.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.SlicerStyle:interface'
    name: SlicerStyle
    fullName: ExcelScript.SlicerStyle
  - uid: 'ExcelScript!ExcelScript.Table:interface'
    name: Table
    fullName: ExcelScript.Table
  - uid: 'ExcelScript!ExcelScript.Workbook#addTable~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.TableStyle:interface'
    name: TableStyle
    fullName: ExcelScript.TableStyle
  - uid: 'ExcelScript!ExcelScript.TimelineStyle:interface'
    name: TimelineStyle
    fullName: ExcelScript.TimelineStyle
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'ExcelScript!ExcelScript.Chart:interface'
    name: Chart
    fullName: ExcelScript.Chart
  - uid: 'ExcelScript!ExcelScript.Application:interface'
    name: Application
    fullName: ExcelScript.Application
  - uid: 'ExcelScript!ExcelScript.Workbook#getBinding~0:complex'
    name: Binding | undefined
    fullName: ExcelScript.Binding | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Binding:interface'
        name: Binding
        fullName: ExcelScript.Binding
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getBindings~0:complex'
    name: 'Binding[]'
    fullName: 'ExcelScript.Binding[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Binding:interface'
        name: Binding
        fullName: ExcelScript.Binding
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getCommentByCell~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Workbook#getComments~0:complex'
    name: 'Comment[]'
    fullName: 'ExcelScript.Comment[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Comment:interface'
        name: Comment
        fullName: ExcelScript.Comment
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getCustomXmlPart~0:complex'
    name: CustomXmlPart | undefined
    fullName: ExcelScript.CustomXmlPart | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: ExcelScript.CustomXmlPart
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace~0:complex'
    name: 'CustomXmlPart[]'
    fullName: 'ExcelScript.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: ExcelScript.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getCustomXmlParts~0:complex'
    name: 'CustomXmlPart[]'
    fullName: 'ExcelScript.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: ExcelScript.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getNamedItem~0:complex'
    name: NamedItem | undefined
    fullName: ExcelScript.NamedItem | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getNames~0:complex'
    name: 'NamedItem[]'
    fullName: 'ExcelScript.NamedItem[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTable~0:complex'
    name: PivotTable | undefined
    fullName: ExcelScript.PivotTable | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTableStyle~0:complex'
    name: PivotTableStyle | undefined
    fullName: ExcelScript.PivotTableStyle | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTableStyle:interface'
        name: PivotTableStyle
        fullName: ExcelScript.PivotTableStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getPivotTableStyles~0:complex'
    name: 'PivotTableStyle[]'
    fullName: 'ExcelScript.PivotTableStyle[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTableStyle:interface'
        name: PivotTableStyle
        fullName: ExcelScript.PivotTableStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.PredefinedCellStyle:interface'
    name: PredefinedCellStyle
    fullName: ExcelScript.PredefinedCellStyle
  - uid: 'ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles~0:complex'
    name: 'PredefinedCellStyle[]'
    fullName: 'ExcelScript.PredefinedCellStyle[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PredefinedCellStyle:interface'
        name: PredefinedCellStyle
        fullName: ExcelScript.PredefinedCellStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DocumentProperties:interface'
    name: DocumentProperties
    fullName: ExcelScript.DocumentProperties
  - uid: 'ExcelScript!ExcelScript.WorkbookProtection:interface'
    name: WorkbookProtection
    fullName: ExcelScript.WorkbookProtection
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicer~0:complex'
    name: Slicer | undefined
    fullName: ExcelScript.Slicer | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicers~0:complex'
    name: 'Slicer[]'
    fullName: 'ExcelScript.Slicer[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicerStyle~0:complex'
    name: SlicerStyle | undefined
    fullName: ExcelScript.SlicerStyle | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.SlicerStyle:interface'
        name: SlicerStyle
        fullName: ExcelScript.SlicerStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getSlicerStyles~0:complex'
    name: 'SlicerStyle[]'
    fullName: 'ExcelScript.SlicerStyle[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.SlicerStyle:interface'
        name: SlicerStyle
        fullName: ExcelScript.SlicerStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getTable~0:complex'
    name: Table | undefined
    fullName: ExcelScript.Table | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getTableStyle~0:complex'
    name: TableStyle | undefined
    fullName: ExcelScript.TableStyle | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.TableStyle:interface'
        name: TableStyle
        fullName: ExcelScript.TableStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getTableStyles~0:complex'
    name: 'TableStyle[]'
    fullName: 'ExcelScript.TableStyle[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.TableStyle:interface'
        name: TableStyle
        fullName: ExcelScript.TableStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getTimelineStyle~0:complex'
    name: TimelineStyle | undefined
    fullName: ExcelScript.TimelineStyle | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.TimelineStyle:interface'
        name: TimelineStyle
        fullName: ExcelScript.TimelineStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getTimelineStyles~0:complex'
    name: 'TimelineStyle[]'
    fullName: 'ExcelScript.TimelineStyle[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.TimelineStyle:interface'
        name: TimelineStyle
        fullName: ExcelScript.TimelineStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#getWorksheet~0:complex'
    name: Worksheet | undefined
    fullName: ExcelScript.Worksheet | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Workbook#getWorksheets~0:complex'
    name: 'Worksheet[]'
    fullName: 'ExcelScript.Worksheet[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle~0:complex'
    name: PivotTableStyle | string
    fullName: ExcelScript.PivotTableStyle | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTableStyle:interface'
        name: PivotTableStyle
        fullName: ExcelScript.PivotTableStyle
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle~0:complex'
    name: SlicerStyle | string
    fullName: ExcelScript.SlicerStyle | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.SlicerStyle:interface'
        name: SlicerStyle
        fullName: ExcelScript.SlicerStyle
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultTableStyle~0:complex'
    name: TableStyle | string
    fullName: ExcelScript.TableStyle | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.TableStyle:interface'
        name: TableStyle
        fullName: ExcelScript.TableStyle
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle~0:complex'
    name: TimelineStyle | string
    fullName: ExcelScript.TimelineStyle | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.TimelineStyle:interface'
        name: TimelineStyle
        fullName: ExcelScript.TimelineStyle
      - name: ' | string'
        fullName: ' | string'