### YamlMime:TSType
name: ExcelScript.Workbook
uid: ExcelScript!ExcelScript.Workbook:interface
package: ExcelScript!
fullName: ExcelScript.Workbook
summary: Workbook は、ワークシート、テーブル、範囲などの関連するブック オブジェクトを含む最上位オブジェクトです。
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addBinding(range, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBinding:member(1)
  package: ExcelScript!
  fullName: addBinding(range, bindingType, id)
  summary: 特定の範囲に新しいバインドを追加します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBinding(
                  range: Range | string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: range
      description: バインドをバインドする範囲です。Excel Range オブジェクト、または文字列である場合があります。文字列の場合は、シート名を含む完全なアドレスが含まれている必要があります
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: bindingType
      description: バインドの種類。 「ExcelScript. BindingType」を参照してください。
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: バインドの名前です。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromNamedItem(name, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromNamedItem:member(1)
  package: ExcelScript!
  fullName: addBindingFromNamedItem(name, bindingType, id)
  summary: ブック内の名前付きアイテムに基づいて新しいバインドを追加します。 名前付きアイテムが複数の領域を参照している場合は、"InvalidReference" エラーが返されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBindingFromNamedItem(
                  name: string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: name
      description: バインドの作成元の名前です。
      type: string
    - id: bindingType
      description: バインドの種類。 「ExcelScript. BindingType」を参照してください。
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: バインドの名前です。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromSelection(bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromSelection:member(1)
  package: ExcelScript!
  fullName: addBindingFromSelection(bindingType, id)
  summary: 現在の選択範囲に基づいて新しいバインドを追加します。 複数の領域が選択されている場合は、"InvalidReference" エラーが返されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addBindingFromSelection(bindingType: BindingType, id: string): Binding;'
    parameters:
    - id: bindingType
      description: バインドの種類。 「ExcelScript. BindingType」を参照してください。
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: バインドの名前です。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addComment(cellAddress, content, contentType)
  uid: ExcelScript!ExcelScript.Workbook#addComment:member(1)
  package: ExcelScript!
  fullName: addComment(cellAddress, content, contentType)
  summary: 指定したセルで、指定した内容の新しいコメントを作成します。 `InvalidArgument`指定した範囲が1つのセルより大きい場合は、エラーがスローされます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addComment(
                  cellAddress: Range | string,
                  content: CommentRichContent | string,
                  contentType?: ContentType
              ): Comment;
    parameters:
    - id: cellAddress
      description: コメントを追加するセルを指定します。 Range オブジェクトまたは文字列を指定できます。 文字列型 (string) の場合は、シート名を含む完全な住所が含まれている必要があります。 `InvalidArgument`指定した範囲が1つのセルより大きい場合は、エラーがスローされます。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: content
      description: コメントの内容を示します。 文字列または CommentRichContent オブジェクトのいずれかを指定できます。 文字列はテキスト形式に対して使用されます。 CommentRichContent オブジェクトでは、メンションなど、他のコメント機能を使用できます。
      type: <xref uid="ExcelScript!ExcelScript.CommentRichContent:interface" /> | string
    - id: contentType
      description: 省略可能。 コメント内に含まれるコンテンツの種類。 既定値は enum です。 `ContentType.Plain`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.ContentType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: addCustomXmlPart(xml)
  uid: ExcelScript!ExcelScript.Workbook#addCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: addCustomXmlPart(xml)
  summary: ブックに新しいカスタム XML パーツを追加します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addCustomXmlPart(xml: string): CustomXmlPart;'
    parameters:
    - id: xml
      description: XML コンテンツ。 有効な XML フラグメントである必要があります。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />
      description: ''
- name: addNamedItem(name, reference, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItem:member(1)
  package: ExcelScript!
  fullName: addNamedItem(name, reference, comment)
  summary: 指定のスコープのコレクションに新しい名前を追加します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItem(
                  name: string,
                  reference: Range | string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: 名前付きの項目の名前。
      type: string
    - id: reference
      description: 名前が参照する数式または範囲。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: comment
      description: 省略可能。 名前付きアイテムに関連付けられているコメント。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addNamedItemFormulaLocal(name, formula, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)
  package: ExcelScript!
  fullName: addNamedItemFormulaLocal(name, formula, comment)
  summary: ユーザーのロケールを数式に使用して、指定のスコープのコレクションに新しい名前を追加します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItemFormulaLocal(
                  name: string,
                  formula: string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: 名前付きアイテムの "名前"。
      type: string
    - id: formula
      description: 名前が参照するユーザーのロケールの数式。
      type: string
    - id: comment
      description: 省略可能。 名前付きアイテムに関連付けられているコメント。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addPivotTable(name, source, destination)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTable:member(1)
  package: ExcelScript!
  fullName: addPivotTable(name, source, destination)
  summary: 指定したソースデータに基づいてピボットテーブルを追加し、貼り付け先のセル範囲の左上のセルに挿入します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTable(
                  name: string,
                  source: Range | string | Table,
                  destination: Range | string
              ): PivotTable;
    parameters:
    - id: name
      description: 新しいピボットテーブルの名前を指定します。
      type: string
    - id: source
      description: 新しいピボットテーブルのソースデータは、範囲 (またはワークシート名を含む文字列のアドレス) またはテーブルのいずれかです。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: destination
      description: ピボットテーブル レポートの配置先範囲 (結果のレポートを配置するワークシートの範囲) の左上端のセルを指定します。
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />
      description: ''
- name: addPivotTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: addPivotTableStyle(name, makeUniqueName)
  summary: 指定された名前で空の PivotTableStyle を作成します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTableStyle(
                  name: string,
                  makeUniqueName?: boolean
              ): PivotTableStyle;
    parameters:
    - id: name
      description: 新しい PivotTableStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
      type: string
    - id: makeUniqueName
      description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: addPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#addPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: addPredefinedCellStyle(name)
  summary: コレクションに新しいスタイルを追加します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addPredefinedCellStyle(name: string): void;'
    parameters:
    - id: name
      description: 追加するスタイルの名前を指定します。
      type: string
    return:
      type: void
      description: ''
- name: addSlicer(slicerSource, sourceField, slicerDestination)
  uid: ExcelScript!ExcelScript.Workbook#addSlicer:member(1)
  package: ExcelScript!
  fullName: addSlicer(slicerSource, sourceField, slicerDestination)
  summary: ブックに新しいスライサーを追加します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addSlicer(
                  slicerSource: string | PivotTable | Table,
                  sourceField: string | PivotField | number | TableColumn,
                  slicerDestination?: string | Worksheet
              ): Slicer;
    parameters:
    - id: slicerSource
      description: 新しいスライサーの基となるデータソース。 PivotTable オブジェクト、Table オブジェクト、または文字列を指定できます。 PivotTable オブジェクトが渡されると、データソースは PivotTable オブジェクトのソースになります。 Table オブジェクトが渡されると、データソースは Table オブジェクトになります。 文字列が渡されると、PivotTable/Table の名前または id として解釈されます。
      type: string | <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: sourceField
      description: フィルター処理の対象となるデータソース内のフィールド。 PivotField オブジェクト、TableColumn オブジェクト、PivotField の id、または TableColumn の id または名前を指定できます。
      type: string | <xref uid="ExcelScript!ExcelScript.PivotField:interface" /> | number | <xref uid="ExcelScript!ExcelScript.TableColumn:interface" />
    - id: slicerDestination
      description: 省略可能。 新しいスライサーを作成するワークシートを指定します。 ワークシートオブジェクト、またはワークシートの名前/id を指定できます。 スライサーコレクションをワークシートから取得する場合は、このパラメーターを省略できます。
      type: string | <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: ''
- name: addSlicerStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addSlicerStyle:member(1)
  package: ExcelScript!
  fullName: addSlicerStyle(name, makeUniqueName)
  summary: 指定された名前で空の SlicerStyle を作成します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addSlicerStyle(name: string, makeUniqueName?: boolean): SlicerStyle;'
    parameters:
    - id: name
      description: 新しい SlicerStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
      type: string
    - id: makeUniqueName
      description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: addTable(address, hasHeaders)
  uid: ExcelScript!ExcelScript.Workbook#addTable:member(1)
  package: ExcelScript!
  fullName: addTable(address, hasHeaders)
  summary: 新しいテーブルを作成します。範囲オブジェクトまたはソース アドレスにより、テーブルが追加されるワークシートが判断されます。テーブルが追加できない場合 (たとえば、アドレスが無効な場合や、テーブルが別のテーブルと重複している場合) は、エラーがスローされます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
    parameters:
    - id: address
      description: Range オブジェクト、あるいはデータ ソースを表す範囲の文字列アドレスまたは名前。 アドレスにシート名が含まれていない場合は、現在作業中のシートが使用されます。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: hasHeaders
      description: インポートされたデータに列ラベルがあるかどうかを示すブール値。ソースにヘッダーが含まれていない場合 (このプロパティが false に設定されている場合)、Excel はデータを下方向に 1 行シフトして、自動的にヘッダーを生成します。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />
      description: ''
- name: addTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTableStyle:member(1)
  package: ExcelScript!
  fullName: addTableStyle(name, makeUniqueName)
  summary: 指定された名前で空の TableStyle を作成します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTableStyle(name: string, makeUniqueName?: boolean): TableStyle;'
    parameters:
    - id: name
      description: 新しい TableStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
      type: string
    - id: makeUniqueName
      description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: addTimelineStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTimelineStyle:member(1)
  package: ExcelScript!
  fullName: addTimelineStyle(name, makeUniqueName)
  summary: 指定された名前で空の TimelineStyle を作成します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTimelineStyle(name: string, makeUniqueName?: boolean): TimelineStyle;'
    parameters:
    - id: name
      description: 新しい TimelineStyle の一意の名前。 名前が既に使用されている場合は、無効な引数の例外がスローされます。
      type: string
    - id: makeUniqueName
      description: 省略可能。既定値は false です。 場合は true を指定すると、必要に応じて、一意の番号を付けることができます。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: addWorksheet(name)
  uid: ExcelScript!ExcelScript.Workbook#addWorksheet:member(1)
  package: ExcelScript!
  fullName: addWorksheet(name)
  summary: 新しいワークシートをブックに追加します。ワークシートは、既存のワークシートの末尾に追加されます。新しく追加したワークシートをアクティブにする場合は、そのワークシートに対して ".activate() を呼び出します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addWorksheet(name?: string): Worksheet;'
    parameters:
    - id: name
      description: 省略可能。追加するワークシートの名前。指定する場合、名前は一意である必要があります。指定されていない場合は、Excel が新しいワークシートの名前を決定します。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getActiveCell()
  uid: ExcelScript!ExcelScript.Workbook#getActiveCell:member(1)
  package: ExcelScript!
  fullName: getActiveCell()
  summary: ブックで現在アクティブなセルを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n/**\n * This script logs the value of the current active cell. \n * If multiple cells are selected, the top-leftmost cell will be logged.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current active cell in the workbook.\n  let cell = workbook.getActiveCell();\n  console.log(`The current cell's value is ${cell.getValue()}`);\n}\n```"
- name: getActiveChart()
  uid: ExcelScript!ExcelScript.Workbook#getActiveChart:member(1)
  package: ExcelScript!
  fullName: getActiveChart()
  summary: ブックで現在アクティブになっているグラフを取得します。 アクティブなグラフがない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveChart(): Chart;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Chart:interface" />
      description: ''
- name: getActiveSlicer()
  uid: ExcelScript!ExcelScript.Workbook#getActiveSlicer:member(1)
  package: ExcelScript!
  fullName: getActiveSlicer()
  summary: ブックで現在アクティブになっているスライサーを取得します。 アクティブなスライサーがない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSlicer(): Slicer;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: ExcelScript!ExcelScript.Workbook#getActiveWorksheet:member(1)
  package: ExcelScript!
  fullName: getActiveWorksheet()
  summary: ブックの、現在作業中のワークシートを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getApplication()
  uid: ExcelScript!ExcelScript.Workbook#getApplication:member(1)
  package: ExcelScript!
  fullName: getApplication()
  summary: このブックを含む Excel アプリケーションインスタンスを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getApplication(): Application;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Application:interface" />
      description: ''
- name: getAutoSave()
  uid: ExcelScript!ExcelScript.Workbook#getAutoSave:member(1)
  package: ExcelScript!
  fullName: getAutoSave()
  summary: ブックが自動保存モードであるかどうかを指定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAutoSave(): boolean;'
    return:
      type: boolean
      description: ''
- name: getBinding(id)
  uid: ExcelScript!ExcelScript.Workbook#getBinding:member(1)
  package: ExcelScript!
  fullName: getBinding(id)
  summary: ID を使用してバインド オブジェクトを取得します。 Binding オブジェクトが存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBinding(id: string): Binding | undefined;'
    parameters:
    - id: id
      description: 取得するバインド オブジェクトの ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" /> | undefined
      description: ''
- name: getBindings()
  uid: ExcelScript!ExcelScript.Workbook#getBindings:member(1)
  package: ExcelScript!
  fullName: getBindings()
  summary: ブックの一部であるバインドのコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBindings(): Binding[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />[]
      description: ''
- name: getCalculationEngineVersion()
  uid: ExcelScript!ExcelScript.Workbook#getCalculationEngineVersion:member(1)
  package: ExcelScript!
  fullName: getCalculationEngineVersion()
  summary: Excel 計算エンジンのバージョンとして数字を返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCalculationEngineVersion(): number;'
    return:
      type: number
      description: ''
- name: getChartDataPointTrack()
  uid: ExcelScript!ExcelScript.Workbook#getChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: getChartDataPointTrack()
  summary: 関連付けられている実際のデータ ポイントをブックの全グラフが追跡している場合、true となります。 False の場合、グラフはデータポイントのインデックスを追跡します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getChartDataPointTrack(): boolean;'
    return:
      type: boolean
      description: ''
- name: getComment(commentId)
  uid: ExcelScript!ExcelScript.Workbook#getComment:member(1)
  package: ExcelScript!
  fullName: getComment(commentId)
  summary: ID に基づいてコレクションからコメントを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComment(commentId: string): Comment;'
    parameters:
    - id: commentId
      description: コメントの識別子。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByCell(cellAddress)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByCell:member(1)
  package: ExcelScript!
  fullName: getCommentByCell(cellAddress)
  summary: 指定したセルからコメントを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByCell(cellAddress: Range | string): Comment;'
    parameters:
    - id: cellAddress
      description: コメントがあるセルを指定します。 Range オブジェクトまたは文字列を指定できます。 文字列型 (string) の場合は、シート名を含む完全な住所が含まれている必要があります。 `InvalidArgument`指定した範囲が1つのセルより大きい場合は、エラーがスローされます。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByReplyId(replyId)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByReplyId:member(1)
  package: ExcelScript!
  fullName: getCommentByReplyId(replyId)
  summary: 指定した返信が接続されているコメントを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByReplyId(replyId: string): Comment;'
    parameters:
    - id: replyId
      description: コメント応答の識別子。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getComments()
  uid: ExcelScript!ExcelScript.Workbook#getComments:member(1)
  package: ExcelScript!
  fullName: getComments()
  summary: ブックに関連付けられているコメントの集まりを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComments(): Comment[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />[]
      description: ''
- name: getCustomXmlPart(id)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPart(id)
  summary: ID に基づいて、カスタム XML パーツを取得します。 CustomXmlPart が存在しない場合、返されるオブジェクトの isNull プロパティは true になります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPart(id: string): CustomXmlPart | undefined;'
    parameters:
    - id: id
      description: 取得するオブジェクトの ID を指定します。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" /> | undefined
      description: ''
- name: getCustomXmlPartByNamespace(namespaceUri)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPartByNamespace(namespaceUri)
  summary: 名前空間が指定した名前空間に一致する、カスタム XML パーツの新しいコレクションを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPartByNamespace(namespaceUri: string): CustomXmlPart[];'
    parameters:
    - id: namespaceUri
      description: これは完全修飾スキーマ URI である必要があります。たとえば、" http://schemas.contoso.com/review/1.0 " などです。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getCustomXmlParts()
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlParts:member(1)
  package: ExcelScript!
  fullName: getCustomXmlParts()
  summary: このブックに格納されているカスタム XML パーツのコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlParts(): CustomXmlPart[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getDefaultPivotTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultPivotTableStyle()
  summary: 親オブジェクトのスコープに対する既定の PivotTableStyle を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultPivotTableStyle(): PivotTableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: getDefaultSlicerStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultSlicerStyle()
  summary: 親オブジェクトのスコープに対する既定の SlicerStyle を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultSlicerStyle(): SlicerStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: getDefaultTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTableStyle()
  summary: 親オブジェクトのスコープに対する既定の TableStyle を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTableStyle(): TableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: getDefaultTimelineStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTimelineStyle()
  summary: 親オブジェクトのスコープに対する既定の TimelineStyle を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTimelineStyle(): TimelineStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: getFirstWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getFirstWorksheet:member(1)
  package: ExcelScript!
  fullName: getFirstWorksheet(visibleOnly)
  summary: コレクション内の最初のワークシートを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirstWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getIsDirty()
  uid: ExcelScript!ExcelScript.Workbook#getIsDirty:member(1)
  package: ExcelScript!
  fullName: getIsDirty()
  summary: ブックが最後に保存されてから変更を行ったかどうかを指定します。 変更したブックを保存しない、または保存するかどうかを確認するダイアログボックスを非表示にして閉じる場合は、このプロパティを true に設定しておくことができます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsDirty(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getLastWorksheet:member(1)
  package: ExcelScript!
  fullName: getLastWorksheet(visibleOnly)
  summary: コレクション内の最後のワークシートを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getName()
  uid: ExcelScript!ExcelScript.Workbook#getName:member(1)
  package: ExcelScript!
  fullName: getName()
  summary: ブックの名前を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getName(): string;'
    return:
      type: string
      description: ''
- name: getNamedItem(name)
  uid: ExcelScript!ExcelScript.Workbook#getNamedItem:member(1)
  package: ExcelScript!
  fullName: getNamedItem(name)
  summary: '`NamedItem`名前を使用してオブジェクトを取得します。 オブジェクトが存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNamedItem(name: string): NamedItem | undefined;'
    parameters:
    - id: name
      description: Nameditem 名。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" /> | undefined
      description: ''
- name: getNames()
  uid: ExcelScript!ExcelScript.Workbook#getNames:member(1)
  package: ExcelScript!
  fullName: getNames()
  summary: ブック スコープの名前付き項目 (名前付き範囲と名前付き定数) のコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNames(): NamedItem[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />[]
      description: ''
- name: getPivotTable(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTable:member(1)
  package: ExcelScript!
  fullName: getPivotTable(name)
  summary: 名前を使用してピボットテーブルを取得します。 PivotTable が存在しない場合は null オブジェクトを返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTable(name: string): PivotTable | undefined;'
    parameters:
    - id: name
      description: 取得するピボットテーブルの名前。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | undefined
      description: ''
- name: getPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables()
  summary: ブックに関連付けられているピボットテーブルのコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(): PivotTable[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPivotTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyle(name)
  summary: 名前に基づいて PivotTableStyle を取得します。 PivotTableStyle が存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyle(name: string): PivotTableStyle | undefined;'
    parameters:
    - id: name
      description: 取得する PivotTableStyle の名前。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" /> | undefined
      description: ''
- name: getPivotTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyles:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyles()
  summary: ブックに関連付けられている PivotTableStyle のコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyles(): PivotTableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />[]
      description: ''
- name: getPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle(name)
  summary: 名前に基づいてスタイルを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(name: string): PredefinedCellStyle;'
    parameters:
    - id: name
      description: 取得するスタイルの名前を指定します。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />
      description: ''
- name: getPredefinedCellStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyles()
  summary: ブックに関連付けられているスタイルのコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyles(): PredefinedCellStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />[]
      description: ''
- name: getPreviouslySaved()
  uid: ExcelScript!ExcelScript.Workbook#getPreviouslySaved:member(1)
  package: ExcelScript!
  fullName: getPreviouslySaved()
  summary: ブックがローカルに、またはオンラインで保存されたことがあるかどうかを指定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviouslySaved(): boolean;'
    return:
      type: boolean
      description: ''
- name: getProperties()
  uid: ExcelScript!ExcelScript.Workbook#getProperties:member(1)
  package: ExcelScript!
  fullName: getProperties()
  summary: ブックのプロパティを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProperties(): DocumentProperties;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DocumentProperties:interface" />
      description: ''
- name: getProtection()
  uid: ExcelScript!ExcelScript.Workbook#getProtection:member(1)
  package: ExcelScript!
  fullName: getProtection()
  summary: ブックの保護オブジェクトを返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProtection(): WorkbookProtection;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookProtection:interface" />
      description: ''
- name: getReadOnly()
  uid: ExcelScript!ExcelScript.Workbook#getReadOnly:member(1)
  package: ExcelScript!
  fullName: getReadOnly()
  summary: true の場合、ブックが読み取り専用モードで開かれます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getReadOnly(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSelectedRange()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRange:member(1)
  package: ExcelScript!
  fullName: getSelectedRange()
  summary: ブックから現在選択されている1つのセル範囲を取得します。 複数の範囲が選択されている場合、このメソッドはエラーをスローします。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSelectedRanges()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRanges:member(1)
  package: ExcelScript!
  fullName: getSelectedRanges()
  summary: ブックから現在選択されている 1 つまたは複数の範囲を取得します。 getSelectedRange() の場合と同様に、このメソッドは、選択されているすべての範囲を表す RangeAreas オブジェクトを返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getSlicer(key)
  uid: ExcelScript!ExcelScript.Workbook#getSlicer:member(1)
  package: ExcelScript!
  fullName: getSlicer(key)
  summary: 名前または id を使用してスライサーを取得します。スライサーが存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicer(key: string): Slicer | undefined;'
    parameters:
    - id: key
      description: 取得するスライサーの名前または Id。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" /> | undefined
      description: ''
- name: getSlicers()
  uid: ExcelScript!ExcelScript.Workbook#getSlicers:member(1)
  package: ExcelScript!
  fullName: getSlicers()
  summary: ブックに関連付けられているスライサーの集まりを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicers(): Slicer[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />[]
      description: ''
- name: getSlicerStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getSlicerStyle(name)
  summary: 名前で SlicerStyle を取得します。 SlicerStyle が存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyle(name: string): SlicerStyle | undefined;'
    parameters:
    - id: name
      description: 取得する SlicerStyle の名前。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | undefined
      description: ''
- name: getSlicerStyles()
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyles:member(1)
  package: ExcelScript!
  fullName: getSlicerStyles()
  summary: ブックに関連付けられている SlicerStyle のコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyles(): SlicerStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />[]
      description: ''
- name: getTable(key)
  uid: ExcelScript!ExcelScript.Workbook#getTable:member(1)
  package: ExcelScript!
  fullName: getTable(key)
  summary: 名前または ID を使用してテーブルを取得します。 テーブルが存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTable(key: string): Table | undefined;'
    parameters:
    - id: key
      description: 取得するテーブルの名前または ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" /> | undefined
      description: ''
- name: getTables()
  uid: ExcelScript!ExcelScript.Workbook#getTables:member(1)
  package: ExcelScript!
  fullName: getTables()
  summary: ブックに関連付けられているテーブルのコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(): Table[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTableStyle:member(1)
  package: ExcelScript!
  fullName: getTableStyle(name)
  summary: 名前で TableStyle を取得します。 TableStyle が存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyle(name: string): TableStyle | undefined;'
    parameters:
    - id: name
      description: 取得する TableStyle の名前。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | undefined
      description: ''
- name: getTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTableStyles:member(1)
  package: ExcelScript!
  fullName: getTableStyles()
  summary: ブックに関連付けられている TableStyle のコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyles(): TableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />[]
      description: ''
- name: getTimelineStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getTimelineStyle(name)
  summary: 名前で TimelineStyle を取得します。 TimelineStyle が存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyle(name: string): TimelineStyle | undefined;'
    parameters:
    - id: name
      description: 取得する TimelineStyle の名前。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | undefined
      description: ''
- name: getTimelineStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyles:member(1)
  package: ExcelScript!
  fullName: getTimelineStyles()
  summary: ブックに関連付けられている TimelineStyle のコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyles(): TimelineStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />[]
      description: ''
- name: getUsePrecisionAsDisplayed()
  uid: ExcelScript!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: getUsePrecisionAsDisplayed()
  summary: ブックを表示桁数でのみ計算する場合、true となります。 このプロパティを false から true に切り替えた場合、データは完全に正確に失われます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsePrecisionAsDisplayed(): boolean;'
    return:
      type: boolean
      description: ''
- name: getWorksheet(key)
  uid: ExcelScript!ExcelScript.Workbook#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet(key)
  summary: 名前または ID を使用して、ワークシート オブジェクトを取得します。 ワークシートが存在しない場合、この関数は、プロパティが次の値に設定されたオブジェクトを返します。 `isNullObject``true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(key: string): Worksheet | undefined;'
    parameters:
    - id: key
      description: ワークシートの名前または ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" /> | undefined
      description: ''
- name: getWorksheets()
  uid: ExcelScript!ExcelScript.Workbook#getWorksheets:member(1)
  package: ExcelScript!
  fullName: getWorksheets()
  summary: ブックに関連付けられているワークシートのコレクションを表します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheets(): Worksheet[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />[]
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n/**\n * This script logs the names of all the worksheets in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get all the worksheets in the workbook. \n  let sheets = workbook.getWorksheets();\n\n  // Get a list of all the worksheet names.\n  let names = sheets.map ((sheet) => sheet.getName());\n\n  // Write in the console all the worksheet names and the total count.\n  console.log(names);\n  console.log(`Total worksheets inside of this workbook: ${sheets.length}`);\n}\n```"
- name: refreshAllDataConnections()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllDataConnections:member(1)
  package: ExcelScript!
  fullName: refreshAllDataConnections()
  summary: すべてのデータ接続を更新します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllDataConnections(): void;'
    return:
      type: void
      description: ''
- name: refreshAllPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllPivotTables:member(1)
  package: ExcelScript!
  fullName: refreshAllPivotTables()
  summary: コレクション内のすべてのピボットテーブルを更新します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllPivotTables(): void;'
    return:
      type: void
      description: ''
- name: setChartDataPointTrack(chartDataPointTrack)
  uid: ExcelScript!ExcelScript.Workbook#setChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: setChartDataPointTrack(chartDataPointTrack)
  summary: 関連付けられている実際のデータ ポイントをブックの全グラフが追跡している場合、true となります。 False の場合、グラフはデータポイントのインデックスを追跡します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setChartDataPointTrack(chartDataPointTrack: boolean): void;'
    parameters:
    - id: chartDataPointTrack
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDefaultPivotTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultPivotTableStyle(newDefaultStyle)
  summary: 親オブジェクトのスコープで使用する既定の PivotTableStyle を設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      setDefaultPivotTableStyle(
                  newDefaultStyle: PivotTableStyle | string
              ): void;
    parameters:
    - id: newDefaultStyle
      description: 新しい既定値にする必要がある、PivotTableStyle オブジェクトの PivotTableStyle オブジェクトまたは名前。
      type: "<xref uid=\"ExcelScript!ExcelScript.PivotTableStyle:interface\" /> | string\n        "
    return:
      type: void
      description: ''
- name: setDefaultSlicerStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultSlicerStyle(newDefaultStyle)
  summary: 親オブジェクトのスコープで使用する既定の SlicerStyle を設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultSlicerStyle(newDefaultStyle: SlicerStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: 新しい既定値にする必要がある、SlicerStyle オブジェクトの SlicerStyle オブジェクトまたは名前。
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTableStyle(newDefaultStyle)
  summary: 親オブジェクトのスコープで使用する既定の TableStyle を設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTableStyle(newDefaultStyle: TableStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: 新しい既定値にする必要がある、TableStyle オブジェクトの TableStyle オブジェクトまたは名前。
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTimelineStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTimelineStyle(newDefaultStyle)
  summary: 親オブジェクトのスコープで使用する既定の TimelineStyle を設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTimelineStyle(newDefaultStyle: TimelineStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: 新しい既定値にする必要がある、TimelineStyle オブジェクトの TimelineStyle オブジェクトまたは名前。
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setIsDirty(isDirty)
  uid: ExcelScript!ExcelScript.Workbook#setIsDirty:member(1)
  package: ExcelScript!
  fullName: setIsDirty(isDirty)
  summary: ブックが最後に保存されてから変更を行ったかどうかを指定します。 変更したブックを保存しない、または保存するかどうかを確認するダイアログボックスを非表示にして閉じる場合は、このプロパティを true に設定しておくことができます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setIsDirty(isDirty: boolean): void;'
    parameters:
    - id: isDirty
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  uid: ExcelScript!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  summary: ブックを表示桁数でのみ計算する場合、true となります。 このプロパティを false から true に切り替えた場合、データは完全に正確に失われます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setUsePrecisionAsDisplayed(usePrecisionAsDisplayed: boolean): void;'
    parameters:
    - id: usePrecisionAsDisplayed
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 23e4276bec55df7612e4bb11dfab3aec59ee5cfa
  ms.sourcegitcommit: 5f690fded7477d48c3af2a89399a0fbc2108bce8
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 12/02/2020
  ms.locfileid: "49554737"
