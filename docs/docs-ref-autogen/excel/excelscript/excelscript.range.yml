### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    summary: '範囲は、セル、行、列、セルのブロックなど、1つまたは複数の隣接するセルのセットを表します。API 全体で範囲を使用する方法の詳細については、「 [Excel JAVASCRIPT api を使用して範囲を操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)する」および「 [excel javascript api を使用して範囲を操作する (詳細)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced) 」を参照してください。<!-- -->.'
    name: ExcelScript.Range
    fullName: ExcelScript.Range
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#calculate:member(1)'
      - 'ExcelScript!ExcelScript.Range#clear:member(1)'
      - 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
      - 'ExcelScript!ExcelScript.Range#convertToLinkedDataType:member(1)'
      - 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
      - 'ExcelScript!ExcelScript.Range#delete:member(1)'
      - 'ExcelScript!ExcelScript.Range#find:member(1)'
      - 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#getImage:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSort:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getText:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTop:member(1)'
      - 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
      - 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Range#group:member(1)'
      - 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#insert:member(1)'
      - 'ExcelScript!ExcelScript.Range#merge:member(1)'
      - 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
      - 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
      - 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
      - 'ExcelScript!ExcelScript.Range#select:member(1)'
      - 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#showCard:member(1)'
      - 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
      - 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
  - uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    summary: 新しい条件付き書式をコレクションの先頭/最上位の優先度に追加します。
    name: addConditionalFormat(type)
    fullName: addConditionalFormat(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
      parameters:
        - id: type
          description: 追加する条件付き書式の種類を指定します。 詳細については、「ConditionalFormatType」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    summary: |-
      指定したオートフィルロジックを使用して、現在の範囲から移動先の範囲に範囲を埋めます。 変換先の範囲は null にすることも、ソースを水平方向または垂直方向に拡張することもできます。 連続していない範囲はサポートされていません。

      詳細については、「[オートフィルおよびフラッシュフィルの使用](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)」を参照してください。<!-- -->.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: オートフィルの対象となるセル範囲を指定します。 引数 destination に null を指定すると、周囲のセル (UI の範囲の塗りつぶしハンドルをダブルクリックしたときの動作) に基づいてデータが入力されます。
          type:
            - 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
        - id: autoFillType
          description: オートフィルの種類を示します。 現在の範囲の内容に基づいて、移動先の範囲をどのように塗りつぶすかを指定します。 既定値は "FillDefault" です。
          type:
            - 'ExcelScript!ExcelScript.AutoFillType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    summary: ワークシート上のセルの範囲を計算します。
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    summary: 範囲の値、書式、塗りつぶし、罫線などをクリアします。
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: 省略可能。 クリア操作の種類を決定します。 詳細については、「Excel. ClearApplyTo」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.ClearApplyTo:enum'
  - uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    summary: 現在指定している範囲でアクティブなすべての条件付き書式をクリアする。
    name: clearAllConditionalFormats()
    fullName: clearAllConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    summary: データ型を含む範囲セルをテキストに変換します。
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#convertToLinkedDataType:member(1)'
    summary: ワークシート内で範囲セルをリンク付きデータ型に変換します。
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: データのクエリに使用されるサービス ID。
          type:
            - number
        - id: languageCulture
          description: サービスを照会する言語カルチャ。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    summary: ソース範囲または RangeAreas から現在の範囲にセル データまたは書式設定をコピーします。 コピー先の範囲は、元の範囲または RangeAreas のサイズと異なる場合があります。 転送先は、ソースよりも小さい場合は自動的に展開されます。
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: コピー元の範囲または RangeAreas を指定します。 ソース範囲に複数の範囲がある場合は、四角形の範囲から完全な行または列を削除することによって、そのフォームを作成できるようにする必要があります。
          type:
            - 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
        - id: copyType
          description: コピーするセルのデータまたは書式の種類を指定します。 既定値は "すべて" です。
          type:
            - 'ExcelScript!ExcelScript.RangeCopyType:enum'
        - id: skipBlanks
          description: True の場合は、ソース範囲の空白セルをスキップします。 既定値は false です。
          type:
            - boolean
        - id: transpose
          description: True を指定すると、貼り付け先の範囲内のセルが転置されます。 既定値は false です。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    summary: 範囲に関連付けられているセルを削除します。
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: セルをシフトする方向を指定します。 詳細については、「DeleteShiftDirection」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    summary: 指定された条件に基づいて指定された文字列を見つけます。 現在の範囲が1つのセルより大きい場合は、検索はその範囲に制限されます。それ以外の場合は、シート全体がそのセルの後に表示されます。 一致しない場合、この関数は null オブジェクトを返します。
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: text
          description: 検索する文字列を指定します。
          type:
            - string
        - id: criteria
          description: 検索の方向、検索をセル全体に一致させる必要があるかどうか、または大文字と小文字を区別するかどうかを含む、追加の検索条件。
          type:
            - 'ExcelScript!ExcelScript.SearchCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    summary: 現在の範囲に対してフラッシュ フィルを実行します。フラッシュ フィルでは、パターンを感知して自動的にデータが設定されるので、範囲は単一列範囲で、かつパターンを検出できるように周囲にデータが存在する必要があります。
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    summary: 現在の Range オブジェクトと左上のセルが同じで、指定した数の行と列を含む Range オブジェクトを取得します。
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: 新しい範囲サイズの行数を指定します。
          type:
            - number
        - id: numColumns
          description: 新しい範囲のサイズの列数を指定します。
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    summary: 'セル範囲の参照を A1 形式で指定します。 Address 値にはシート参照が含まれます (例: "Sheet1!A1: B4 ")'
    name: getAddress()
    fullName: getAddress()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddress(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    summary: ユーザーの言語で指定された範囲の範囲参照を指定します。
    name: getAddressLocal()
    fullName: getAddressLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    summary: '指定した範囲を包含する、最小の Range オブジェクトを取得します。 たとえば、"B2:C5" と "D10:E15" の GetBoundingRect は、"B2:E15" になります。'
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: Range オブジェクト、アドレスまたは範囲名。
          type:
            - 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    summary: 行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。 ワークシートのグリッド内に収まるセルは、親の範囲の境界の外側にある場合があります。 返されるセルは、範囲の左上のセルを基準に配置されます。
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: 取得するセルの行番号。 0 を起点とする番号になります。
          type:
            - number
        - id: column
          description: 取得セルの列番号。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    summary: '範囲内のセルの数を指定します。 セルの数が 2^31-1 (2,147,483,647) を超えると、この API は -1 を返します。'
    name: getCellCount()
    fullName: getCellCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    summary: 範囲に含まれる列を 1 つ取得します。
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: column
          description: 取得する範囲の列番号。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    summary: 範囲内の列の合計数を指定します。
    name: getColumnCount()
    fullName: getColumnCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    summary: 現在の範囲のすべての列が非表示になっているかどうかを表します。
    name: getColumnHidden()
    fullName: getColumnHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    summary: 範囲内の最初のセルの列番号を指定します。 0 を起点とする番号になります。
    name: getColumnIndex()
    fullName: getColumnIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    summary: 現在の Range オブジェクトの右にある特定の列数を取得します。
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    summary: 現在の Range オブジェクトの左にある特定の列数を取得します。
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    summary: 指定された ID に対応する条件付き書式を返します。
    name: getConditionalFormat(id)
    fullName: getConditionalFormat(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: 条件付き書式の id を指定します。
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    summary: 範囲と交差する ConditionalFormats のコレクションです。
    name: getConditionalFormats()
    fullName: getConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    summary: dataValidation オブジェクトを返します。
    name: getDataValidation()
    fullName: getDataValidation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DataValidation:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    summary: '範囲の列全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4: E11" を表している場合 `getEntireColumn` は、"B: E" という列を表す範囲)。'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    summary: '範囲の行全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4: E11" を表している場合 `GetEntireRow` は、行 "4:11" を表す範囲になります)。'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    summary: Format オブジェクト (範囲のフォント、塗りつぶし、罫線、配置などのプロパティをカプセル化するオブジェクト) を返します。
    name: getFormat()
    fullName: getFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeFormat:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    summary: セルの数式を A1 形式の表記で表します。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getFormula()
    fullName: getFormula()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormula(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    summary: 'ユーザーの言語と書式設定ロケールで、A1 形式の表記法でセルの数式を表します。 たとえば、英語の数式 "=SUM(A1, 1.5)" は、ドイツ語では "=SUMME(A1; 1,5)" になります。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。'
    name: getFormulaLocal()
    fullName: getFormulaLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    summary: セルの数式を R1C1 形式の表記で表します。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getFormulaR1C1()
    fullName: getFormulaR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    summary: A1 スタイル表記の数式を表します。
    name: getFormulas()
    fullName: getFormulas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    summary: 'Represents the formula in A1-style notation, in the user''s language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.'
    name: getFormulasLocal()
    fullName: getFormulasLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    summary: R1C1 スタイル表記の数式を表します。
    name: getFormulasR1C1()
    fullName: getFormulasR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    summary: '100% ズームの場合の、範囲の上端から範囲の下端までの距離を、ポイント単位で返します。 '
    name: getHeight()
    fullName: getHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    summary: 現在の範囲のすべてのセルが非表示になっているかどうかを表します。
    name: getHidden()
    fullName: getHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    summary: 現在の範囲のハイパーリンクを表します。
    name: getHyperlink()
    fullName: getHyperlink()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    summary: 範囲を base64 でエンコードされた png 画像としてレンダリングします。
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    summary: 指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。 交差部分が見つからない場合は、null オブジェクトを返します。
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。
          type:
            - 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    summary: 現在の範囲が列全体であるかどうかを表します。
    name: getIsEntireColumn()
    fullName: getIsEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    summary: 現在の範囲が行全体であるかどうかを表します。
    name: getIsEntireRow()
    fullName: getIsEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    summary: '範囲内の最後のセルを取得します。 たとえば、"B2:D5" の最後のセルは "D5" になります。'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    summary: '範囲内の最後の列を取得します。 たとえば、"B2:D5" の最後の列は "D2:D5" になります。'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    summary: '範囲内の最後の行を取得します。 たとえば、"B2:D5" の最後の行は "B5:D5" になります。'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    summary: '100% ズームの場合の、ワークシートの左端から範囲の左端までの距離を、ポイント単位で返します。 '
    name: getLeft()
    fullName: getLeft()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLeft(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    summary: セルのデータ型の状態を表します。
    name: getLinkedDataTypeState()
    fullName: getLinkedDataTypeState()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type:
          - 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    summary: 各セルのデータ型の状態を表します。
    name: getLinkedDataTypeStates()
    fullName: getLinkedDataTypeStates()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    summary: 指定されたセル範囲の Excel の数値書式コードを表します。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getNumberFormat()
    fullName: getNumberFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    summary: ユーザーの言語設定に基づいて、指定されたセル範囲の Excel の数値書式コードを表します。 Excel では、プロパティを取得または設定するときに、言語や書式の強制変換は実行されません `numberFormatLocal` 。 返されるテキストには、システム設定で指定された言語に基づいてローカルに書式設定された文字列が使用されます。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getNumberFormatLocal()
    fullName: getNumberFormatLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    summary: 指定された範囲の Excel の数値書式コードを表します。
    name: getNumberFormats()
    fullName: getNumberFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    summary: ユーザーの言語設定に基づいて、指定された範囲の Excel の数値書式コードを表します。 Excel では、プロパティを取得または設定するときに、言語や書式の強制変換は実行されません `numberFormatLocal` 。 返されるテキストには、システム設定で指定された言語に基づいてローカルに書式設定された文字列が使用されます。
    name: getNumberFormatsLocal()
    fullName: getNumberFormatsLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    summary: 'Gets an object which represents a range that''s offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.'
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
      parameters:
        - id: rowOffset
          description: 'The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.'
          type:
            - number
        - id: columnOffset
          description: 'The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    summary: 範囲に重なっているピボットテーブルのスコープ設定されたコレクションを取得します。
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: True の場合は、範囲範囲内に完全に含まれるピボットテーブルのみを返します。 既定値は false です。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    summary: 現在の範囲のスタイルを表します。 セルのスタイルに不整合がある場合は、null が返されます。 ユーザー設定のスタイルの場合は、スタイル名が返されます。 組み込みのスタイルの場合、BuiltInStyle 列挙内の値を表す文字列が返されます。
    name: getPredefinedCellStyle()
    fullName: getPredefinedCellStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    summary: 現在の Range オブジェクトに似た (ただし、右下隅がいくつかの行と列で拡張 (または縮小) されている) Range オブジェクトを取得します。
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
          * This script copies the formatting in the active cell to the neighboring cells.
          * Note that this script only works when the active cell isn't on an edge of the worksheet.
          */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
              );
          }
          ```
      parameters:
        - id: deltaRows
          description: 'The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.'
          type:
            - number
        - id: deltaColumns
          description: 現在の範囲を基準にして、右下隅を展開する列数を指定します。 範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    summary: 範囲に含まれている行を 1 つ取得します。
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: 取得する範囲の行番号。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    summary: 範囲に含まれる行の合計数を返します。
    name: getRowCount()
    fullName: getRowCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowCount(): number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    summary: 現在の範囲のすべての行が非表示になっているかどうかを表します。
    name: getRowHidden()
    fullName: getRowHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    summary: 範囲に含まれる最初のセルの行番号を返します。 0 を起点とする番号になります。
    name: getRowIndex()
    fullName: getRowIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    summary: 現在の Range オブジェクトの上にある特定の行数を取得します。
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    summary: 現在の Range オブジェクトの下にある特定の行数を取得します。
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    summary: 現在の範囲について、範囲の並べ替えを表します。
    name: getSort()
    fullName: getSort()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeSort:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    summary: 指定された型と値に一致するすべてのセルを表し、1 つまたは複数の範囲を構成する RangeAreas オブジェクトを取得します。 特別なセルが見つからない場合は、null オブジェクトが返されます。
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 含めるセルの種類を指定します。
          type:
            - 'ExcelScript!ExcelScript.SpecialCellType:enum'
        - id: cellValueType
          description: CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。 これらの値は、組み合わせて複数の型を返すことができます。 この引数を省略すると、すべての定数および数式が対象になります。
          type:
            - 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    summary: 指定された範囲の左上のセルを囲む領域を表す Range オブジェクトを返します。 周囲の領域は、この範囲に相対の空白の行と空白の列の任意の組み合わせで囲まれた範囲です。
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    summary: 範囲と重なるテーブルの集まりを範囲限定で取得します。
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: True の場合は、範囲範囲内に完全に含まれるテーブルのみを返します。 既定値は false です。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    summary: 指定された範囲のテキスト値を表します。 テキスト値は、セルの幅には依存しません。 \#EXCEL UI で行われた符号置換は、API によって返されるテキスト値には影響しません。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    summary: 指定した範囲のテキスト値。 テキスト値は、セルの幅には依存しません。 \#EXCEL UI で行われた符号置換は、API によって返されるテキスト値には影響しません。
    name: getTexts()
    fullName: getTexts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    summary: '100% ズームの場合の、ワークシートの上端から範囲の上端までの距離を、ポイント単位で返します。 '
    name: getTop()
    fullName: getTop()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTop(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    summary: 'Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 値の入っているセルのみを使用セルと見なします。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    summary: 指定された範囲の生の値を表します。 返されるデータの型は、文字列、数値、ブール値のいずれかになります。 エラーが含まれているセルは、エラー文字列を返します。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getValue()
    fullName: getValue()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValue(): any;'
      return:
        type:
          - any
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          /**
            * This sample reads the value of A1 and prints it to the console.
            */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    summary: 指定した範囲の Raw 値を表します。 返されるデータの型は、文字列、数値、ブール値のいずれかになります。 エラーが含まれているセルは、エラー文字列を返します。
    name: getValues()
    fullName: getValues()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValues(): any[][];'
      return:
        type:
          - 'any[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    summary: セル内のデータの種類を表します。 範囲に複数のセルが含まれている場合、最初のセル (0 の行インデックスと列インデックスが0で表されます) からデータが返されます。
    name: getValueType()
    fullName: getValueType()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeValueType:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    summary: 各セルのデータの種類を指定します。
    name: getValueTypes()
    fullName: getValueTypes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    summary: 現在の範囲の表示されている行を表します。
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeView:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    summary: '100% ズームの場合の、範囲の左端から範囲の右端までの距離を、ポイント単位で返します。 '
    name: getWidth()
    fullName: getWidth()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    summary: 現在の範囲を含んでいるワークシート。
    name: getWorksheet()
    fullName: getWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    summary: アウトラインの列と行をグループ化します。
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 行または列によって範囲をグループ化する方法を指定します。 `InvalidArgument`グループのオプションが範囲のまたはプロパティと異なる場合、エラーがスローされます `isEntireRow` `isEntireColumn` (つまり、true で、 `range.isEntireRow` `groupOption` "bycolumns" または True で、 `range.isEntireColumn` `groupOption` "bycolumns")。
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    summary: 行または列グループの詳細を非表示にします。
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: グループ化された行または列のグループ化の詳細を非表示にするかどうかを指定します。
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    summary: 'Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.'
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: セルをシフトする方向を指定します。 詳細については、「InsertShiftDirection」を参照してください。
          type:
            - 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    summary: 範囲内のセルをワークシートの 1 つの領域に結合します。
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: 省略可能。 指定した範囲のセルを行ごとに結合して、行ごとに別のセルを作成する場合は True に設定します。 既定値は False です。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    summary: セルの値、書式設定、および数式を現在の範囲から移動先の範囲に移動し、そのセルの古い情報を置き換えます。 移動先の範囲は、現在の範囲よりも小さい場合は自動的に展開されます。 元の範囲の領域の外にある、移動先の範囲内のすべてのセルが変更されることはありません。
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange この範囲内の情報の移動先となる範囲を指定します。
          type:
            - 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    summary: 列によって指定される範囲から重複する値を削除します。
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
        description: ''
      parameters:
        - id: columns
          description: 重複が含まれる可能性がある範囲内の列。 少なくとも1つの列を指定する必要があります。 0 を起点とする番号になります。
          type:
            - 'number[]'
        - id: includesHeader
          description: True の場合は、入力データにヘッダーが含まれています。 既定値は false です。
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    summary: 現在の範囲内で、指定された条件に基づき、指定された文字列を検索し、置換します。
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: text
          description: 検索する文字列を指定します。
          type:
            - string
        - id: replacement
          description: 元のと置き換える文字列。
          type:
            - string
        - id: criteria
          description: 置換条件を追加します。
          type:
            - 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    summary: Excel UI で指定した範囲を選択します。
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    summary: 現在の範囲のすべての列が非表示になっているかどうかを表します。
    name: setColumnHidden(columnHidden)
    fullName: setColumnHidden(columnHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    summary: 次の再計算が発生したときに再計算する範囲を設定します。
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    summary: セルの数式を A1 形式の表記に設定します。 範囲に複数のセルが含まれている場合は、指定範囲の各セルが入力データで更新されます。
    name: setFormula(formula)
    fullName: setFormula(formula)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormula(formula: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formula
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    summary: 'ユーザーの言語と書式設定ロケールで、セルの数式を A1 形式の表記で設定します。 たとえば、英語の数式 "=SUM(A1, 1.5)" は、ドイツ語では "=SUMME(A1; 1,5)" になります。 範囲に複数のセルが含まれている場合は、指定範囲の各セルが入力データで更新されます。'
    name: setFormulaLocal(formulaLocal)
    fullName: setFormulaLocal(formulaLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    summary: セルの数式を R1C1 形式の表記で設定します。 範囲に複数のセルが含まれている場合は、指定範囲の各セルが入力データで更新されます。
    name: setFormulaR1C1(formulaR1C1)
    fullName: setFormulaR1C1(formulaR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaR1C1
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    summary: A1 スタイル表記の数式を表します。
    name: setFormulas(formulas)
    fullName: setFormulas(formulas)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulas
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    summary: 'Represents the formula in A1-style notation, in the user''s language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.'
    name: setFormulasLocal(formulasLocal)
    fullName: setFormulasLocal(formulasLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    summary: R1C1 スタイル表記の数式を表します。
    name: setFormulasR1C1(formulasR1C1)
    fullName: setFormulasR1C1(formulasR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasR1C1
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    summary: 現在の範囲のハイパーリンクを表します。
    name: setHyperlink(hyperlink)
    fullName: setHyperlink(hyperlink)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: hyperlink
          description: ''
          type:
            - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    summary: 指定されたセル範囲に Excel の数値書式コードを設定します。 範囲に複数のセルが含まれている場合は、指定範囲の各セルが入力データで更新されます。
    name: setNumberFormat(numberFormat)
    fullName: setNumberFormat(numberFormat)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormat
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    summary: ユーザーの言語設定に基づいて、指定されたセル範囲の Excel の数値書式コードを設定します。 Excel では、プロパティを取得または設定するときに、言語や書式の強制変換は実行されません `numberFormatLocal` 。 返されるテキストには、システム設定で指定された言語に基づいてローカルに書式設定された文字列が使用されます。 範囲に複数のセルが含まれている場合は、指定範囲の各セルが入力データで更新されます。
    name: setNumberFormatLocal(numberFormatLocal)
    fullName: setNumberFormatLocal(numberFormatLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    summary: 指定された範囲の Excel の数値書式コードを表します。
    name: setNumberFormats(numberFormats)
    fullName: setNumberFormats(numberFormats)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormats
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    summary: ユーザーの言語設定に基づいて、指定された範囲の Excel の数値書式コードを表します。 Excel では、プロパティを取得または設定するときに、言語や書式の強制変換は実行されません `numberFormatLocal` 。 返されるテキストには、システム設定で指定された言語に基づいてローカルに書式設定された文字列が使用されます。
    name: setNumberFormatsLocal(numberFormatsLocal)
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatsLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    summary: 現在の範囲のスタイルを表します。 セルのスタイルに不整合がある場合は、null が返されます。 ユーザー設定のスタイルの場合は、スタイル名が返されます。 組み込みのスタイルの場合、BuiltInStyle 列挙内の値を表す文字列が返されます。
    name: setPredefinedCellStyle(predefinedCellStyle)
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: predefinedCellStyle
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    summary: 現在の範囲のすべての行が非表示になっているかどうかを表します。
    name: setRowHidden(rowHidden)
    fullName: setRowHidden(rowHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    summary: 指定された範囲の生の値を設定します。 設定されるデータは、string、number、または boolean 型の場合があります。 `null`値は無視されます (Excel で設定または上書きされません)。 範囲に複数のセルが含まれている場合は、指定範囲の各セルが入力データで更新されます。
    name: setValue(value)
    fullName: setValue(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValue(value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    summary: 指定した範囲の Raw 値を表します。 返されるデータの型は、文字列、数値、ブール値のいずれかになります。 エラーが含まれているセルは、エラー文字列を返します。
    name: setValues(values)
    fullName: setValues(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValues(values: any[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: values
          description: ''
          type:
            - 'any[][]'
  - uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    summary: アクティブ セルに多数の値が含まれる場合、そのセルのカードを表示します。
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    summary: 行または列グループの詳細を表示します。
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: グループ化された行またはグループ化された列の詳細を表示するかどうかを指定します。
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    summary: アウトラインの列と行のグループ化を解除します。
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 行または列によって範囲をグループ解除する方法を指定します。
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    summary: 範囲内のセルを結合解除して別々のセルにします。
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
references:
  - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: ExcelScript.ConditionalFormat
  - uid: 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: ExcelScript.ConditionalFormatType
  - uid: 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.AutoFillType:enum'
    name: AutoFillType
    fullName: ExcelScript.AutoFillType
  - uid: 'ExcelScript!ExcelScript.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: ExcelScript.ClearApplyTo
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RangeCopyType:enum'
    name: RangeCopyType
    fullName: ExcelScript.RangeCopyType
  - uid: 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
    name: DeleteShiftDirection
    fullName: ExcelScript.DeleteShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'ExcelScript!ExcelScript.SearchCriteria:interface'
    name: SearchCriteria
    fullName: ExcelScript.SearchCriteria
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
    name: 'ConditionalFormat[]'
    fullName: 'ExcelScript.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        name: ConditionalFormat
        fullName: ExcelScript.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DataValidation:interface'
    name: DataValidation
    fullName: ExcelScript.DataValidation
  - uid: 'ExcelScript!ExcelScript.RangeFormat:interface'
    name: RangeFormat
    fullName: ExcelScript.RangeFormat
  - uid: 'ExcelScript!ExcelScript.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: ExcelScript.RangeHyperlink
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
    name: LinkedDataTypeState
    fullName: ExcelScript.LinkedDataTypeState
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'ExcelScript.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: ExcelScript.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeSort:interface'
    name: RangeSort
    fullName: ExcelScript.RangeSort
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.SpecialCellType:enum'
    name: SpecialCellType
    fullName: ExcelScript.SpecialCellType
  - uid: 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: ExcelScript.SpecialCellValueType
  - uid: 'ExcelScript!ExcelScript.Range#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
    name: RangeValueType
    fullName: ExcelScript.RangeValueType
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'ExcelScript.RangeValueType[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
        name: RangeValueType
        fullName: ExcelScript.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.RangeView:interface'
    name: RangeView
    fullName: ExcelScript.RangeView
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.GroupOption:enum'
    name: GroupOption
    fullName: ExcelScript.GroupOption
  - uid: 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
    name: InsertShiftDirection
    fullName: ExcelScript.InsertShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: ExcelScript.RemoveDuplicatesResult
  - uid: 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: ExcelScript.ReplaceCriteria