### YamlMime:TSType
name: ExcelScript.ConditionalFormat
uid: ExcelScript!ExcelScript.ConditionalFormat:interface
package: ExcelScript!
fullName: ExcelScript.ConditionalFormat
summary: 条件付き書式の範囲、書式、規則、およびその他のプロパティをカプセル化するオブジェクト。
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: delete()
  uid: ExcelScript!ExcelScript.ConditionalFormat#delete:member(1)
  package: ExcelScript!
  fullName: delete()
  summary: この条件付き書式を削除します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: getCellValue()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getCellValue:member(1)
  package: ExcelScript!
  fullName: getCellValue()
  summary: 現在の条件付き書式が型の場合は、セル値の条件付き書式プロパティを `CellValue` 返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellValue(): CellValueConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CellValueConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```TypeScript\n/**\n * This script applies conditional formatting to a range.\n * That formatting is conditional upon the cell's numerical value.\n * Any value between 50 and 75 will have the cell fill color changed and the font made italic.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range to format.\n  const sheet = workbook.getActiveWorksheet();\n  const ratingColumn = sheet.getRange(\"D2:D20\");\n\n  // Add cell value conditional formatting.\n  const cellValueConditionalFormatting =\n    ratingColumn.addConditionalFormat(ExcelScript.ConditionalFormatType.cellValue).getCellValue();\n  \n  // Create the condition, in this case when the cell value is between 50 and 75.\n  let rule: ExcelScript.ConditionalCellValueRule = {\n    formula1: \"50\",\n    formula2: \"75\",\n    operator: ExcelScript.ConditionalCellValueOperator.between\n  };\n  cellValueConditionalFormatting.setRule(rule);\n\n  // Set the format to apply when the condition is met.\n  let format = cellValueConditionalFormatting.getFormat();\n  format.getFill().setColor(\"yellow\");\n  format.getFont().setItalic(true);\n\n}\n```"
- name: getColorScale()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getColorScale:member(1)
  package: ExcelScript!
  fullName: getColorScale()
  summary: 現在の条件付き書式が型の場合は、色スケールの条件付き書式プロパティを `ColorScale` 返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColorScale(): ColorScaleConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ColorScaleConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```TypeScript\n/**\n * This script applies a red, white, and blue color scale to the selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected range.\n  let selectedRange = workbook.getSelectedRange();\n\n  // Create a new conditional formatting object by adding one to the range.\n  let conditionalFormatting = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);\n\n  // Set the colors for the three parts of the scale: minimum, midpoint, and maximum.\n  conditionalFormatting.getColorScale().setCriteria({\n    minimum: {\n      color:\"#F8696B\", /* A pale red. */\n      type:ExcelScript.ConditionalFormatColorCriterionType.lowestValue\n    },\n    midpoint: {\n      color: \"#FCFCFF\", /* Slightly off-white. */\n      formula:'=50',type:ExcelScript.ConditionalFormatColorCriterionType.percentile\n    },\n    maximum: {\n      color: \"#5A8AC6\", /* A pale blue. */\n      type:ExcelScript.ConditionalFormatColorCriterionType.highestValue\n    }\n  });\n}\n```"
- name: getCustom()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getCustom:member(1)
  package: ExcelScript!
  fullName: getCustom()
  summary: 現在の条件付き書式がカスタム型の場合は、カスタム条件付き書式プロパティを返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustom(): CustomConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```TypeScript\n/**\n * This script applies a custom conditional formatting to the selected range.\n * A light-green fill is applied to a cell if the value is larger than the value in the row's previous column.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected cells.\n  let selectedRange = workbook.getSelectedRange();\n\n  // Apply a rule for positive change from the previous column.\n  let positiveChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);\n  positiveChange.getCustom().getFormat().getFill().setColor(\"lightgreen\");\n  positiveChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}>${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);\n}\n```"
- name: getDataBar()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getDataBar:member(1)
  package: ExcelScript!
  fullName: getDataBar()
  summary: 現在の条件付き書式がデータ バーの場合は、データ バーのプロパティを返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBar(): DataBarConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataBarConditionalFormat:interface" /> | undefined
      description: ''
- name: getIconSet()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getIconSet:member(1)
  package: ExcelScript!
  fullName: getIconSet()
  summary: 現在の条件付き書式が型の場合は、アイコン セットの条件付き書式プロパティを `IconSet` 返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIconSet(): IconSetConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.IconSetConditionalFormat:interface" /> | undefined
      description: ''
- name: getId()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getId:member(1)
  package: ExcelScript!
  fullName: getId()
  summary: 現在の条件付き書式の優先度 `ConditionalFormatCollection`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getId(): string;'
    return:
      type: string
      description: ''
- name: getPreset()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getPreset:member(1)
  package: ExcelScript!
  fullName: getPreset()
  summary: 事前設定された条件の条件付き形式を返します。 詳細については、`ExcelScript.PresetCriteriaConditionalFormat`を参照してください。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreset(): PresetCriteriaConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PresetCriteriaConditionalFormat:interface" /> | undefined
      description: ''
- name: getPriority()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getPriority:member(1)
  package: ExcelScript!
  fullName: getPriority()
  summary: この条件付き書式が現在存在する条件付き書式コレクション内の優先度 (またはインデックス)。 これを変更すると、他の条件付き形式の優先順位も変更され、連続した優先度の順序が可能になります。 負の優先順位を使用して、後ろから開始します。 境界より大きい優先順位は、最大値 (負の場合は最小値) の優先順位を取得して設定します。 また、優先度を変更する場合は、さらに変更を加える場合は、その新しい優先度の場所でオブジェクトの新しいコピーを再フェッチする必要があることにも注意してください。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPriority(): number;'
    return:
      type: number
      description: ''
- name: getRange()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getRange:member(1)
  package: ExcelScript!
  fullName: getRange()
  summary: 条件付き書式を適用する範囲を返します。 条件付き書式が複数の範囲に適用されている場合、このメソッドは `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRanges()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getRanges:member(1)
  package: ExcelScript!
  fullName: getRanges()
  summary: を返します。 `RangeAreas`<!-- -->は、条件付き書式が適用される 1 つまたは複数の四角形の範囲で構成されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getStopIfTrue()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getStopIfTrue:member(1)
  package: ExcelScript!
  fullName: getStopIfTrue()
  summary: この条件付き書式の条件が満たされた場合、優先順位の低い書式はそのセルに影響を及ぼしません。 値は `null` 、データ バー、アイコン セット、およびカラー スケール上にあります。これらの概念 `StopIfTrue` がないためです。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getStopIfTrue(): boolean;'
    return:
      type: boolean
      description: ''
- name: getTextComparison()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getTextComparison:member(1)
  package: ExcelScript!
  fullName: getTextComparison()
  summary: 現在の条件付き書式がテキスト型の場合は、特定のテキスト条件付き書式プロパティを返します。 たとえば、"Text" という単語に一致するセルを書式設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTextComparison(): TextConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TextConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```TypeScript\n/**\n * This script adds conditional formatting to the first column in the worksheet.\n * This formatting gives the cells a green fill if they have text starting with \"Excel\".\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the first column in the current worksheet.\n  const currentSheet = workbook.getActiveWorksheet();\n  const firstColumn = currentSheet.getRange(\"A:A\");\n\n  // Add conditional formatting based on the text in the cells.\n  const textConditionFormat = \n    firstColumn.addConditionalFormat(ExcelScript.ConditionalFormatType.containsText).getTextComparison();\n\n  // Set the conditional format to provide a green fill.\n  textConditionFormat.getFormat().getFill().setColor(\"green\");\n\n  // Apply the condition rule that the text begins with \"Excel\".\n  const textRule: ExcelScript.ConditionalTextComparisonRule = {\n    operator: ExcelScript.ConditionalTextOperator.beginsWith,\n    text: \"Excel\"\n  };\n  textConditionFormat.setRule(textRule);\n}\n```"
- name: getTopBottom()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getTopBottom:member(1)
  package: ExcelScript!
  fullName: getTopBottom()
  summary: 現在の条件付き書式が型の場合は、上/下の条件付き書式プロパティを `TopBottom` 返します。 たとえば、上位 10% または下位 10 項目の書式を設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTopBottom(): TopBottomConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TopBottomConditionalFormat:interface" /> | undefined
      description: ''
- name: getType()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getType:member(1)
  package: ExcelScript!
  fullName: getType()
  summary: 条件付き書式の種類。 一度に設定できるのは 1 つだけです。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getType(): ConditionalFormatType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
      description: ''
- name: setPriority(priority)
  uid: ExcelScript!ExcelScript.ConditionalFormat#setPriority:member(1)
  package: ExcelScript!
  fullName: setPriority(priority)
  summary: この条件付き書式が現在存在する条件付き書式コレクション内の優先度 (またはインデックス)。 これを変更すると、他の条件付き形式の優先順位も変更され、連続した優先度の順序が可能になります。 負の優先順位を使用して、後ろから開始します。 境界より大きい優先順位は、最大値 (負の場合は最小値) の優先順位を取得して設定します。 また、優先度を変更する場合は、さらに変更を加える場合は、その新しい優先度の場所でオブジェクトの新しいコピーを再フェッチする必要があることにも注意してください。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPriority(priority: number): void;'
    parameters:
    - id: priority
      description: ''
      type: number
    return:
      type: void
      description: ''
- name: setStopIfTrue(stopIfTrue)
  uid: ExcelScript!ExcelScript.ConditionalFormat#setStopIfTrue:member(1)
  package: ExcelScript!
  fullName: setStopIfTrue(stopIfTrue)
  summary: この条件付き書式の条件が満たされた場合、優先順位の低い書式はそのセルに影響を及ぼしません。 値は `null` 、データ バー、アイコン セット、およびカラー スケール上にあります。これらの概念 `StopIfTrue` がないためです。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setStopIfTrue(stopIfTrue: boolean): void;'
    parameters:
    - id: stopIfTrue
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 7c9b7f9b1fb7350f3fb52bdd04d0bdef985cd8b1
  ms.sourcegitcommit: e4d007e5b8fa836727fe0419950ff22d5edc2384
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 08/24/2022
  ms.locfileid: "67423898"
